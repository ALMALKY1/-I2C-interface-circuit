
I2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002a8a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000016  00800060  00002a8a  00002afe  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00002544  00000000  00000000  00002b14  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000eb2  00000000  00000000  00005058  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005f0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  0000604a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000061ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  00008cee  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00009a9c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00009bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  00009e89  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000a657  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e8       	ldi	r30, 0x8A	; 138
      68:	fa e2       	ldi	r31, 0x2A	; 42
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0d 14 	call	0x281a	; 0x281a <main>
      7a:	0c 94 43 15 	jmp	0x2a86	; 0x2a86 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	ad e6       	ldi	r26, 0x6D	; 109
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 0c 15 	jmp	0x2a18	; 0x2a18 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	8d e6       	ldi	r24, 0x6D	; 109
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 28 15 	jmp	0x2a50	; 0x2a50 <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 18 15 	jmp	0x2a30	; 0x2a30 <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 34 15 	jmp	0x2a68	; 0x2a68 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 38 15 	jmp	0x2a70	; 0x2a70 <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <I2C_init>:


//MASRTER TRANSMATTE ___ WRITE MODE

void I2C_init (void)
{
     b36:	df 93       	push	r29
     b38:	cf 93       	push	r28
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
	TWSR = (1<<TWPS0)|(1<<TWPS1); //4 PRESCALLE
     b3e:	e1 e2       	ldi	r30, 0x21	; 33
     b40:	f0 e0       	ldi	r31, 0x00	; 0
     b42:	83 e0       	ldi	r24, 0x03	; 3
     b44:	80 83       	st	Z, r24
	TWBR = (uint8_t)TWBR_value ;
     b46:	e0 e2       	ldi	r30, 0x20	; 32
     b48:	f0 e0       	ldi	r31, 0x00	; 0
     b4a:	87 e0       	ldi	r24, 0x07	; 7
     b4c:	80 83       	st	Z, r24
}
     b4e:	cf 91       	pop	r28
     b50:	df 91       	pop	r29
     b52:	08 95       	ret

00000b54 <I2C_START>:

uint8_t I2C_START(void)
{
     b54:	df 93       	push	r29
     b56:	cf 93       	push	r28
     b58:	0f 92       	push	r0
     b5a:	cd b7       	in	r28, 0x3d	; 61
     b5c:	de b7       	in	r29, 0x3e	; 62
	//reset TW_CONTROL_REGISTER
	TWCR=0;
     b5e:	e6 e5       	ldi	r30, 0x56	; 86
     b60:	f0 e0       	ldi	r31, 0x00	; 0
     b62:	10 82       	st	Z, r1
	//transmit  START condition
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     b64:	e6 e5       	ldi	r30, 0x56	; 86
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	84 ea       	ldi	r24, 0xA4	; 164
     b6a:	80 83       	st	Z, r24
	//wait for end transmission
	while(!(TWCR & (1 << TWINT)));
     b6c:	e6 e5       	ldi	r30, 0x56	; 86
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
     b70:	80 81       	ld	r24, Z
     b72:	88 23       	and	r24, r24
     b74:	dc f7       	brge	.-10     	; 0xb6c <I2C_START+0x18>
	//check if the start condition was successfully transmitted
	if((TWSR & 0xF8 )!= TW_START) return 0;
     b76:	e1 e2       	ldi	r30, 0x21	; 33
     b78:	f0 e0       	ldi	r31, 0x00	; 0
     b7a:	80 81       	ld	r24, Z
     b7c:	80 e0       	ldi	r24, 0x00	; 0
	return 1 ;
}
     b7e:	0f 90       	pop	r0
     b80:	cf 91       	pop	r28
     b82:	df 91       	pop	r29
     b84:	08 95       	ret

00000b86 <I2C_WRITE_address>:
//MASTER MODE



void I2C_WRITE_address(uint8_t adress )
{
     b86:	df 93       	push	r29
     b88:	cf 93       	push	r28
     b8a:	0f 92       	push	r0
     b8c:	cd b7       	in	r28, 0x3d	; 61
     b8e:	de b7       	in	r29, 0x3e	; 62
     b90:	89 83       	std	Y+1, r24	; 0x01
    TWDR=adress + I2C_Write_MODE;    // Address and write instruction
     b92:	e3 e2       	ldi	r30, 0x23	; 35
     b94:	f0 e0       	ldi	r31, 0x00	; 0
     b96:	89 81       	ldd	r24, Y+1	; 0x01
     b98:	80 83       	st	Z, r24
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     b9a:	e6 e5       	ldi	r30, 0x56	; 86
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	84 e8       	ldi	r24, 0x84	; 132
     ba0:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
     ba2:	e6 e5       	ldi	r30, 0x56	; 86
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	88 23       	and	r24, r24
     baa:	dc f7       	brge	.-10     	; 0xba2 <I2C_WRITE_address+0x1c>
    while((TWSR & 0xF8)!= TW_MT_SLA_ACK);  // Check for the acknoledgement
     bac:	e1 e2       	ldi	r30, 0x21	; 33
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	88 2f       	mov	r24, r24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	88 7f       	andi	r24, 0xF8	; 248
     bb8:	90 70       	andi	r25, 0x00	; 0
     bba:	88 31       	cpi	r24, 0x18	; 24
     bbc:	91 05       	cpc	r25, r1
     bbe:	b1 f7       	brne	.-20     	; 0xbac <I2C_WRITE_address+0x26>
}
     bc0:	0f 90       	pop	r0
     bc2:	cf 91       	pop	r28
     bc4:	df 91       	pop	r29
     bc6:	08 95       	ret

00000bc8 <I2C_read_address>:

void I2C_read_address(uint8_t adress)
{
     bc8:	df 93       	push	r29
     bca:	cf 93       	push	r28
     bcc:	0f 92       	push	r0
     bce:	cd b7       	in	r28, 0x3d	; 61
     bd0:	de b7       	in	r29, 0x3e	; 62
     bd2:	89 83       	std	Y+1, r24	; 0x01
    TWDR=adress+I2C_READ_MODE;    // Address and read instruction
     bd4:	e3 e2       	ldi	r30, 0x23	; 35
     bd6:	f0 e0       	ldi	r31, 0x00	; 0
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	8f 5f       	subi	r24, 0xFF	; 255
     bdc:	80 83       	st	Z, r24
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     bde:	e6 e5       	ldi	r30, 0x56	; 86
     be0:	f0 e0       	ldi	r31, 0x00	; 0
     be2:	84 e8       	ldi	r24, 0x84	; 132
     be4:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
     be6:	e6 e5       	ldi	r30, 0x56	; 86
     be8:	f0 e0       	ldi	r31, 0x00	; 0
     bea:	80 81       	ld	r24, Z
     bec:	88 23       	and	r24, r24
     bee:	dc f7       	brge	.-10     	; 0xbe6 <I2C_read_address+0x1e>
    while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
     bf0:	e1 e2       	ldi	r30, 0x21	; 33
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	80 81       	ld	r24, Z
     bf6:	88 2f       	mov	r24, r24
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	88 7f       	andi	r24, 0xF8	; 248
     bfc:	90 70       	andi	r25, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	b1 f7       	brne	.-20     	; 0xbf0 <I2C_read_address+0x28>
}
     c04:	0f 90       	pop	r0
     c06:	cf 91       	pop	r28
     c08:	df 91       	pop	r29
     c0a:	08 95       	ret

00000c0c <I2C_MASTER_WRITE>:





uint8_t  I2C_MASTER_WRITE(uint8_t data){
     c0c:	df 93       	push	r29
     c0e:	cf 93       	push	r28
     c10:	00 d0       	rcall	.+0      	; 0xc12 <I2C_MASTER_WRITE+0x6>
     c12:	cd b7       	in	r28, 0x3d	; 61
     c14:	de b7       	in	r29, 0x3e	; 62
     c16:	89 83       	std	Y+1, r24	; 0x01

	//load DATA INTO REGISTER
	TWDR = data ;
     c18:	e3 e2       	ldi	r30, 0x23	; 35
     c1a:	f0 e0       	ldi	r31, 0x00	; 0
     c1c:	89 81       	ldd	r24, Y+1	; 0x01
     c1e:	80 83       	st	Z, r24

	// START transmission
	TWCR = (1<<TWINT) | (1<<TWEN) ;
     c20:	e6 e5       	ldi	r30, 0x56	; 86
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	84 e8       	ldi	r24, 0x84	; 132
     c26:	80 83       	st	Z, r24

	// Wait for TWINT flag set in TWCR Register
	while(!(TWCR & (1 << TWINT)));
     c28:	e6 e5       	ldi	r30, 0x56	; 86
     c2a:	f0 e0       	ldi	r31, 0x00	; 0
     c2c:	80 81       	ld	r24, Z
     c2e:	88 23       	and	r24, r24
     c30:	dc f7       	brge	.-10     	; 0xc28 <I2C_MASTER_WRITE+0x1c>

	//check  device has ACK Data done
	if((TWSR&0xF8) != TW_MT_DATA_ACK) return 1 ;
     c32:	e1 e2       	ldi	r30, 0x21	; 33
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 2f       	mov	r24, r24
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	88 7f       	andi	r24, 0xF8	; 248
     c3e:	90 70       	andi	r25, 0x00	; 0
     c40:	88 32       	cpi	r24, 0x28	; 40
     c42:	91 05       	cpc	r25, r1
     c44:	19 f0       	breq	.+6      	; 0xc4c <I2C_MASTER_WRITE+0x40>
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	8a 83       	std	Y+2, r24	; 0x02
     c4a:	01 c0       	rjmp	.+2      	; 0xc4e <I2C_MASTER_WRITE+0x42>

	return 0 ;
     c4c:	1a 82       	std	Y+2, r1	; 0x02
     c4e:	8a 81       	ldd	r24, Y+2	; 0x02
}
     c50:	0f 90       	pop	r0
     c52:	0f 90       	pop	r0
     c54:	cf 91       	pop	r28
     c56:	df 91       	pop	r29
     c58:	08 95       	ret

00000c5a <I2C_MASTER_Read_data>:


//MASTWER READ MODE

uint8_t I2C_MASTER_Read_data(void)
{
     c5a:	df 93       	push	r29
     c5c:	cf 93       	push	r28
     c5e:	cd b7       	in	r28, 0x3d	; 61
     c60:	de b7       	in	r29, 0x3e	; 62
    TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
     c62:	e6 e5       	ldi	r30, 0x56	; 86
     c64:	f0 e0       	ldi	r31, 0x00	; 0
     c66:	84 e8       	ldi	r24, 0x84	; 132
     c68:	80 83       	st	Z, r24
    while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
     c6a:	e6 e5       	ldi	r30, 0x56	; 86
     c6c:	f0 e0       	ldi	r31, 0x00	; 0
     c6e:	80 81       	ld	r24, Z
     c70:	88 23       	and	r24, r24
     c72:	dc f7       	brge	.-10     	; 0xc6a <I2C_MASTER_Read_data+0x10>
    while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
     c74:	e1 e2       	ldi	r30, 0x21	; 33
     c76:	f0 e0       	ldi	r31, 0x00	; 0
     c78:	80 81       	ld	r24, Z
     c7a:	88 2f       	mov	r24, r24
     c7c:	90 e0       	ldi	r25, 0x00	; 0
     c7e:	88 7f       	andi	r24, 0xF8	; 248
     c80:	90 70       	andi	r25, 0x00	; 0
     c82:	88 35       	cpi	r24, 0x58	; 88
     c84:	91 05       	cpc	r25, r1
     c86:	b1 f7       	brne	.-20     	; 0xc74 <I2C_MASTER_Read_data+0x1a>

    return TWDR ;
     c88:	e3 e2       	ldi	r30, 0x23	; 35
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
}
     c8e:	cf 91       	pop	r28
     c90:	df 91       	pop	r29
     c92:	08 95       	ret

00000c94 <I2C_SLAVE_Init>:



//slave Init

uint8_t I2C_SLAVE_Init(uint8_t adresse){
     c94:	df 93       	push	r29
     c96:	cf 93       	push	r28
     c98:	00 d0       	rcall	.+0      	; 0xc9a <I2C_SLAVE_Init+0x6>
     c9a:	0f 92       	push	r0
     c9c:	cd b7       	in	r28, 0x3d	; 61
     c9e:	de b7       	in	r29, 0x3e	; 62
     ca0:	8a 83       	std	Y+2, r24	; 0x02

	// load address
	TWAR=adresse ;
     ca2:	e2 e2       	ldi	r30, 0x22	; 34
     ca4:	f0 e0       	ldi	r31, 0x00	; 0
     ca6:	8a 81       	ldd	r24, Y+2	; 0x02
     ca8:	80 83       	st	Z, r24
	// transmit ADRESS
	  TWCR=(1<<TWEN)|(1<<TWEA)|(1<<TWINT);
     caa:	e6 e5       	ldi	r30, 0x56	; 86
     cac:	f0 e0       	ldi	r31, 0x00	; 0
     cae:	84 ec       	ldi	r24, 0xC4	; 196
     cb0:	80 83       	st	Z, r24
	// delay for transmission
	while(!(TWCR & (1 << TWINT)));
     cb2:	e6 e5       	ldi	r30, 0x56	; 86
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	88 23       	and	r24, r24
     cba:	dc f7       	brge	.-10     	; 0xcb2 <I2C_SLAVE_Init+0x1e>

	//check if  the device has ACK READ OR WRITE  MODE
	while((TWSR & 0xF8)!= 0x08);
     cbc:	e1 e2       	ldi	r30, 0x21	; 33
     cbe:	f0 e0       	ldi	r31, 0x00	; 0
     cc0:	80 81       	ld	r24, Z
     cc2:	88 2f       	mov	r24, r24
     cc4:	90 e0       	ldi	r25, 0x00	; 0
     cc6:	88 7f       	andi	r24, 0xF8	; 248
     cc8:	90 70       	andi	r25, 0x00	; 0
     cca:	88 30       	cpi	r24, 0x08	; 8
     ccc:	91 05       	cpc	r25, r1
     cce:	b1 f7       	brne	.-20     	; 0xcbc <I2C_SLAVE_Init+0x28>
	uint8_t twst = TWSR & 0xF8 ;
     cd0:	e1 e2       	ldi	r30, 0x21	; 33
     cd2:	f0 e0       	ldi	r31, 0x00	; 0
     cd4:	80 81       	ld	r24, Z
     cd6:	88 7f       	andi	r24, 0xF8	; 248
     cd8:	89 83       	std	Y+1, r24	; 0x01
	if((twst !=TW_MT_SLA_ACK && twst!= TW_MR_SLA_ACK))return 1 ;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
     cdc:	88 31       	cpi	r24, 0x18	; 24
     cde:	31 f0       	breq	.+12     	; 0xcec <I2C_SLAVE_Init+0x58>
     ce0:	89 81       	ldd	r24, Y+1	; 0x01
     ce2:	80 34       	cpi	r24, 0x40	; 64
     ce4:	19 f0       	breq	.+6      	; 0xcec <I2C_SLAVE_Init+0x58>
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	8b 83       	std	Y+3, r24	; 0x03
     cea:	01 c0       	rjmp	.+2      	; 0xcee <I2C_SLAVE_Init+0x5a>
	return 0;
     cec:	1b 82       	std	Y+3, r1	; 0x03
     cee:	8b 81       	ldd	r24, Y+3	; 0x03
}
     cf0:	0f 90       	pop	r0
     cf2:	0f 90       	pop	r0
     cf4:	0f 90       	pop	r0
     cf6:	cf 91       	pop	r28
     cf8:	df 91       	pop	r29
     cfa:	08 95       	ret

00000cfc <I2C_Slave_listen_READ>:

//Slave Receiver Mode

uint8_t I2C_Slave_listen_READ(){
     cfc:	df 93       	push	r29
     cfe:	cf 93       	push	r28
     d00:	00 d0       	rcall	.+0      	; 0xd02 <I2C_Slave_listen_READ+0x6>
     d02:	cd b7       	in	r28, 0x3d	; 61
     d04:	de b7       	in	r29, 0x3e	; 62


		uint8_t status ;
		while(!(TWCR&(1<<TWINT)));
     d06:	e6 e5       	ldi	r30, 0x56	; 86
     d08:	f0 e0       	ldi	r31, 0x00	; 0
     d0a:	80 81       	ld	r24, Z
     d0c:	88 23       	and	r24, r24
     d0e:	dc f7       	brge	.-10     	; 0xd06 <I2C_Slave_listen_READ+0xa>
		status=TWSR&0xF8;
     d10:	e1 e2       	ldi	r30, 0x21	; 33
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	80 81       	ld	r24, Z
     d16:	88 7f       	andi	r24, 0xF8	; 248
     d18:	89 83       	std	Y+1, r24	; 0x01
		 while(status!= 0x60) // Loop till correct acknoledgement have been received
     d1a:	89 81       	ldd	r24, Y+1	; 0x01
     d1c:	80 36       	cpi	r24, 0x60	; 96
     d1e:	59 f0       	breq	.+22     	; 0xd36 <I2C_Slave_listen_READ+0x3a>
		 {
		        // Get acknowlegement, Enable TWI, Clear TWI interrupt flag
		        TWCR=(1<<TWEA)|(1<<TWEN)|(1<<TWINT);
     d20:	e6 e5       	ldi	r30, 0x56	; 86
     d22:	f0 e0       	ldi	r31, 0x00	; 0
     d24:	84 ec       	ldi	r24, 0xC4	; 196
     d26:	80 83       	st	Z, r24
		        while (!(TWCR & (1<<TWINT)));  // Wait for TWINT flag
     d28:	e6 e5       	ldi	r30, 0x56	; 86
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	88 23       	and	r24, r24
     d30:	dc f7       	brge	.-10     	; 0xd28 <I2C_Slave_listen_READ+0x2c>
		        return 0;
     d32:	1a 82       	std	Y+2, r1	; 0x02
     d34:	02 c0       	rjmp	.+4      	; 0xd3a <I2C_Slave_listen_READ+0x3e>
		 }
		 return 1 ;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8a 83       	std	Y+2, r24	; 0x02
     d3a:	8a 81       	ldd	r24, Y+2	; 0x02
}
     d3c:	0f 90       	pop	r0
     d3e:	0f 90       	pop	r0
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <I2C_SLAVE_READ>:



int8_t I2C_SLAVE_READ(void)
{
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
	  TWCR= (1<<TWINT)|(1<<TWEA)|(1<<TWEN);
     d4e:	e6 e5       	ldi	r30, 0x56	; 86
     d50:	f0 e0       	ldi	r31, 0x00	; 0
     d52:	84 ec       	ldi	r24, 0xC4	; 196
     d54:	80 83       	st	Z, r24
	    while (!(TWCR & (1<<TWINT)));    // Wait for TWINT flag
     d56:	e6 e5       	ldi	r30, 0x56	; 86
     d58:	f0 e0       	ldi	r31, 0x00	; 0
     d5a:	80 81       	ld	r24, Z
     d5c:	88 23       	and	r24, r24
     d5e:	dc f7       	brge	.-10     	; 0xd56 <I2C_SLAVE_READ+0x10>
	    while((TWSR & 0xF8)!=0x80);        // Wait for acknowledgement
     d60:	e1 e2       	ldi	r30, 0x21	; 33
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	80 81       	ld	r24, Z
     d66:	88 2f       	mov	r24, r24
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	88 7f       	andi	r24, 0xF8	; 248
     d6c:	90 70       	andi	r25, 0x00	; 0
     d6e:	80 38       	cpi	r24, 0x80	; 128
     d70:	91 05       	cpc	r25, r1
     d72:	b1 f7       	brne	.-20     	; 0xd60 <I2C_SLAVE_READ+0x1a>
	   return TWDR;                    // Get value from TWDR
     d74:	e3 e2       	ldi	r30, 0x23	; 35
     d76:	f0 e0       	ldi	r31, 0x00	; 0
     d78:	80 81       	ld	r24, Z

}
     d7a:	cf 91       	pop	r28
     d7c:	df 91       	pop	r29
     d7e:	08 95       	ret

00000d80 <I2C_Slave_listen_WRITE>:


//slave transmater mode


uint8_t I2C_Slave_listen_WRITE(){
     d80:	df 93       	push	r29
     d82:	cf 93       	push	r28
     d84:	0f 92       	push	r0
     d86:	cd b7       	in	r28, 0x3d	; 61
     d88:	de b7       	in	r29, 0x3e	; 62

		uint8_t status ;
		while(!(TWCR&(1<<TWINT)));
     d8a:	e6 e5       	ldi	r30, 0x56	; 86
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	80 81       	ld	r24, Z
     d90:	88 23       	and	r24, r24
     d92:	dc f7       	brge	.-10     	; 0xd8a <I2C_Slave_listen_WRITE+0xa>
		 return 1 ;
     d94:	81 e0       	ldi	r24, 0x01	; 1
		        return 0;
		    }

		 return 1 ;

	}
     d96:	0f 90       	pop	r0
     d98:	cf 91       	pop	r28
     d9a:	df 91       	pop	r29
     d9c:	08 95       	ret

00000d9e <I2C_SLAVE_WRITE>:


//slave write

void I2C_SLAVE_WRITE(uint8_t data) // Function to write data
{
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	0f 92       	push	r0
     da4:	cd b7       	in	r28, 0x3d	; 61
     da6:	de b7       	in	r29, 0x3e	; 62
     da8:	89 83       	std	Y+1, r24	; 0x01
    TWDR= data;              // Fill TWDR register whith the data to be sent
     daa:	e3 e2       	ldi	r30, 0x23	; 35
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	89 81       	ldd	r24, Y+1	; 0x01
     db0:	80 83       	st	Z, r24
    TWCR= (1<<TWEN)|(1<<TWINT);   // Enable TWI, Clear TWI interrupt flag
     db2:	e6 e5       	ldi	r30, 0x56	; 86
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	84 e8       	ldi	r24, 0x84	; 132
     db8:	80 83       	st	Z, r24
    while((TWSR & 0xF8) != 0xC0); // Wait for the acknowledgement
     dba:	e1 e2       	ldi	r30, 0x21	; 33
     dbc:	f0 e0       	ldi	r31, 0x00	; 0
     dbe:	80 81       	ld	r24, Z
     dc0:	88 2f       	mov	r24, r24
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	88 7f       	andi	r24, 0xF8	; 248
     dc6:	90 70       	andi	r25, 0x00	; 0
     dc8:	80 3c       	cpi	r24, 0xC0	; 192
     dca:	91 05       	cpc	r25, r1
     dcc:	b1 f7       	brne	.-20     	; 0xdba <I2C_SLAVE_WRITE+0x1c>
}
     dce:	0f 90       	pop	r0
     dd0:	cf 91       	pop	r28
     dd2:	df 91       	pop	r29
     dd4:	08 95       	ret

00000dd6 <I2C_READ_ACK>:


//slave read

uint8_t I2C_READ_ACK(void)
{
     dd6:	df 93       	push	r29
     dd8:	cf 93       	push	r28
     dda:	cd b7       	in	r28, 0x3d	; 61
     ddc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)| (1<<TWEA) ;
     dde:	e6 e5       	ldi	r30, 0x56	; 86
     de0:	f0 e0       	ldi	r31, 0x00	; 0
     de2:	84 ec       	ldi	r24, 0xC4	; 196
     de4:	80 83       	st	Z, r24

	// Wait for TWINT flag set in TWCR Register
	  while (!(TWCR & (1 << TWINT)));
     de6:	e6 e5       	ldi	r30, 0x56	; 86
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	88 23       	and	r24, r24
     dee:	dc f7       	brge	.-10     	; 0xde6 <I2C_READ_ACK+0x10>

	  return TWDR  ;
     df0:	e3 e2       	ldi	r30, 0x23	; 35
     df2:	f0 e0       	ldi	r31, 0x00	; 0
     df4:	80 81       	ld	r24, Z
}
     df6:	cf 91       	pop	r28
     df8:	df 91       	pop	r29
     dfa:	08 95       	ret

00000dfc <I2C_READ_NOT_ACK>:

uint8_t I2C_READ_NOT_ACK(void)
{
     dfc:	df 93       	push	r29
     dfe:	cf 93       	push	r28
     e00:	cd b7       	in	r28, 0x3d	; 61
     e02:	de b7       	in	r29, 0x3e	; 62

	TWCR = (1<<TWINT)|(1<<TWEN);
     e04:	e6 e5       	ldi	r30, 0x56	; 86
     e06:	f0 e0       	ldi	r31, 0x00	; 0
     e08:	84 e8       	ldi	r24, 0x84	; 132
     e0a:	80 83       	st	Z, r24
	// Wait for TWINT flag set in TWCR Register
		  while (!(TWCR & (1 << TWINT)));
     e0c:	e6 e5       	ldi	r30, 0x56	; 86
     e0e:	f0 e0       	ldi	r31, 0x00	; 0
     e10:	80 81       	ld	r24, Z
     e12:	88 23       	and	r24, r24
     e14:	dc f7       	brge	.-10     	; 0xe0c <I2C_READ_NOT_ACK+0x10>
		  return TWDR  ;
     e16:	e3 e2       	ldi	r30, 0x23	; 35
     e18:	f0 e0       	ldi	r31, 0x00	; 0
     e1a:	80 81       	ld	r24, Z

}
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <I2C_TRANSMATE>:




uint8_t I2C_TRANSMATE(uint8_t address , uint8_t*data , uint16_t length)
{
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	cd b7       	in	r28, 0x3d	; 61
     e28:	de b7       	in	r29, 0x3e	; 62
     e2a:	27 97       	sbiw	r28, 0x07	; 7
     e2c:	0f b6       	in	r0, 0x3f	; 63
     e2e:	f8 94       	cli
     e30:	de bf       	out	0x3e, r29	; 62
     e32:	0f be       	out	0x3f, r0	; 63
     e34:	cd bf       	out	0x3d, r28	; 61
     e36:	8a 83       	std	Y+2, r24	; 0x02
     e38:	7c 83       	std	Y+4, r23	; 0x04
     e3a:	6b 83       	std	Y+3, r22	; 0x03
     e3c:	5e 83       	std	Y+6, r21	; 0x06
     e3e:	4d 83       	std	Y+5, r20	; 0x05
     e40:	12 c0       	rjmp	.+36     	; 0xe66 <I2C_TRANSMATE+0x44>


	for(uint8_t i ; i<length ; i++)
	{
		if(I2C_MASTER_WRITE(data[length])){
     e42:	2b 81       	ldd	r18, Y+3	; 0x03
     e44:	3c 81       	ldd	r19, Y+4	; 0x04
     e46:	8d 81       	ldd	r24, Y+5	; 0x05
     e48:	9e 81       	ldd	r25, Y+6	; 0x06
     e4a:	f9 01       	movw	r30, r18
     e4c:	e8 0f       	add	r30, r24
     e4e:	f9 1f       	adc	r31, r25
     e50:	80 81       	ld	r24, Z
     e52:	0e 94 06 06 	call	0xc0c	; 0xc0c <I2C_MASTER_WRITE>
     e56:	88 23       	and	r24, r24
     e58:	19 f0       	breq	.+6      	; 0xe60 <I2C_TRANSMATE+0x3e>

		return 1 ;
     e5a:	81 e0       	ldi	r24, 0x01	; 1
     e5c:	8f 83       	std	Y+7, r24	; 0x07
     e5e:	0e c0       	rjmp	.+28     	; 0xe7c <I2C_TRANSMATE+0x5a>

uint8_t I2C_TRANSMATE(uint8_t address , uint8_t*data , uint16_t length)
{


	for(uint8_t i ; i<length ; i++)
     e60:	89 81       	ldd	r24, Y+1	; 0x01
     e62:	8f 5f       	subi	r24, 0xFF	; 255
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	28 2f       	mov	r18, r24
     e6a:	30 e0       	ldi	r19, 0x00	; 0
     e6c:	8d 81       	ldd	r24, Y+5	; 0x05
     e6e:	9e 81       	ldd	r25, Y+6	; 0x06
     e70:	28 17       	cp	r18, r24
     e72:	39 07       	cpc	r19, r25
     e74:	30 f3       	brcs	.-52     	; 0xe42 <I2C_TRANSMATE+0x20>

		return 1 ;
		}
	}

	I2C_STOP();
     e76:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_STOP>
return 0 ;
     e7a:	1f 82       	std	Y+7, r1	; 0x07
     e7c:	8f 81       	ldd	r24, Y+7	; 0x07

}
     e7e:	27 96       	adiw	r28, 0x07	; 7
     e80:	0f b6       	in	r0, 0x3f	; 63
     e82:	f8 94       	cli
     e84:	de bf       	out	0x3e, r29	; 62
     e86:	0f be       	out	0x3f, r0	; 63
     e88:	cd bf       	out	0x3d, r28	; 61
     e8a:	cf 91       	pop	r28
     e8c:	df 91       	pop	r29
     e8e:	08 95       	ret

00000e90 <i2c_Recevie>:

uint8_t i2c_Recevie(uint8_t address , uint8_t*data ,uint8_t length)
{
     e90:	0f 93       	push	r16
     e92:	1f 93       	push	r17
     e94:	df 93       	push	r29
     e96:	cf 93       	push	r28
     e98:	00 d0       	rcall	.+0      	; 0xe9a <i2c_Recevie+0xa>
     e9a:	00 d0       	rcall	.+0      	; 0xe9c <i2c_Recevie+0xc>
     e9c:	0f 92       	push	r0
     e9e:	cd b7       	in	r28, 0x3d	; 61
     ea0:	de b7       	in	r29, 0x3e	; 62
     ea2:	8a 83       	std	Y+2, r24	; 0x02
     ea4:	7c 83       	std	Y+4, r23	; 0x04
     ea6:	6b 83       	std	Y+3, r22	; 0x03
     ea8:	4d 83       	std	Y+5, r20	; 0x05
	for(uint8_t i=0; i<length-1 ; i++)
     eaa:	19 82       	std	Y+1, r1	; 0x01
     eac:	0f c0       	rjmp	.+30     	; 0xecc <i2c_Recevie+0x3c>
		{
			data[length]=I2C_READ_ACK();
     eae:	8d 81       	ldd	r24, Y+5	; 0x05
     eb0:	28 2f       	mov	r18, r24
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	8b 81       	ldd	r24, Y+3	; 0x03
     eb6:	9c 81       	ldd	r25, Y+4	; 0x04
     eb8:	8c 01       	movw	r16, r24
     eba:	02 0f       	add	r16, r18
     ebc:	13 1f       	adc	r17, r19
     ebe:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <I2C_READ_ACK>
     ec2:	f8 01       	movw	r30, r16
     ec4:	80 83       	st	Z, r24

}

uint8_t i2c_Recevie(uint8_t address , uint8_t*data ,uint8_t length)
{
	for(uint8_t i=0; i<length-1 ; i++)
     ec6:	89 81       	ldd	r24, Y+1	; 0x01
     ec8:	8f 5f       	subi	r24, 0xFF	; 255
     eca:	89 83       	std	Y+1, r24	; 0x01
     ecc:	89 81       	ldd	r24, Y+1	; 0x01
     ece:	28 2f       	mov	r18, r24
     ed0:	30 e0       	ldi	r19, 0x00	; 0
     ed2:	8d 81       	ldd	r24, Y+5	; 0x05
     ed4:	88 2f       	mov	r24, r24
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	01 97       	sbiw	r24, 0x01	; 1
     eda:	28 17       	cp	r18, r24
     edc:	39 07       	cpc	r19, r25
     ede:	3c f3       	brlt	.-50     	; 0xeae <i2c_Recevie+0x1e>
		{
			data[length]=I2C_READ_ACK();
		}
	 data[length-1]=I2C_READ_NOT_ACK();
     ee0:	8d 81       	ldd	r24, Y+5	; 0x05
     ee2:	88 2f       	mov	r24, r24
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	9c 01       	movw	r18, r24
     ee8:	21 50       	subi	r18, 0x01	; 1
     eea:	30 40       	sbci	r19, 0x00	; 0
     eec:	8b 81       	ldd	r24, Y+3	; 0x03
     eee:	9c 81       	ldd	r25, Y+4	; 0x04
     ef0:	8c 01       	movw	r16, r24
     ef2:	02 0f       	add	r16, r18
     ef4:	13 1f       	adc	r17, r19
     ef6:	0e 94 fe 06 	call	0xdfc	; 0xdfc <I2C_READ_NOT_ACK>
     efa:	f8 01       	movw	r30, r16
     efc:	80 83       	st	Z, r24
	 I2C_STOP();
     efe:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_STOP>

				return 0 ;
     f02:	80 e0       	ldi	r24, 0x00	; 0
		}
     f04:	0f 90       	pop	r0
     f06:	0f 90       	pop	r0
     f08:	0f 90       	pop	r0
     f0a:	0f 90       	pop	r0
     f0c:	0f 90       	pop	r0
     f0e:	cf 91       	pop	r28
     f10:	df 91       	pop	r29
     f12:	1f 91       	pop	r17
     f14:	0f 91       	pop	r16
     f16:	08 95       	ret

00000f18 <I2C_STOP>:


void I2C_STOP(void){
     f18:	df 93       	push	r29
     f1a:	cf 93       	push	r28
     f1c:	cd b7       	in	r28, 0x3d	; 61
     f1e:	de b7       	in	r29, 0x3e	; 62
		TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO);
     f20:	e6 e5       	ldi	r30, 0x56	; 86
     f22:	f0 e0       	ldi	r31, 0x00	; 0
     f24:	84 e9       	ldi	r24, 0x94	; 148
     f26:	80 83       	st	Z, r24
		while(!(TWCR & (1 << TWINT)));
     f28:	e6 e5       	ldi	r30, 0x56	; 86
     f2a:	f0 e0       	ldi	r31, 0x00	; 0
     f2c:	80 81       	ld	r24, Z
     f2e:	88 23       	and	r24, r24
     f30:	dc f7       	brge	.-10     	; 0xf28 <I2C_STOP+0x10>
}
     f32:	cf 91       	pop	r28
     f34:	df 91       	pop	r29
     f36:	08 95       	ret

00000f38 <I2C_repeated_start>:


void I2C_repeated_start(void)
{
     f38:	df 93       	push	r29
     f3a:	cf 93       	push	r28
     f3c:	cd b7       	in	r28, 0x3d	; 61
     f3e:	de b7       	in	r29, 0x3e	; 62
// Clear TWI interrupt flag, Put start condition on SDA, Enable TWI
TWCR= (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
     f40:	e6 e5       	ldi	r30, 0x56	; 86
     f42:	f0 e0       	ldi	r31, 0x00	; 0
     f44:	84 ea       	ldi	r24, 0xA4	; 164
     f46:	80 83       	st	Z, r24
while(!(TWCR & (1<<TWINT))); // wait till restart condition is transmitted
     f48:	e6 e5       	ldi	r30, 0x56	; 86
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	88 23       	and	r24, r24
     f50:	dc f7       	brge	.-10     	; 0xf48 <I2C_repeated_start+0x10>
while((TWSR & 0xF8)!= 0x10); // Check for the acknoledgement
     f52:	e1 e2       	ldi	r30, 0x21	; 33
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 81       	ld	r24, Z
     f58:	88 2f       	mov	r24, r24
     f5a:	90 e0       	ldi	r25, 0x00	; 0
     f5c:	88 7f       	andi	r24, 0xF8	; 248
     f5e:	90 70       	andi	r25, 0x00	; 0
     f60:	80 31       	cpi	r24, 0x10	; 16
     f62:	91 05       	cpc	r25, r1
     f64:	b1 f7       	brne	.-20     	; 0xf52 <I2C_repeated_start+0x1a>
}
     f66:	cf 91       	pop	r28
     f68:	df 91       	pop	r29
     f6a:	08 95       	ret

00000f6c <Dio_vidSetPinDirection>:



void Dio_vidSetPinDirection(enuPortType Port, uint8_t Pin, enuPortDirection Direction)

{
     f6c:	df 93       	push	r29
     f6e:	cf 93       	push	r28
     f70:	00 d0       	rcall	.+0      	; 0xf72 <Dio_vidSetPinDirection+0x6>
     f72:	00 d0       	rcall	.+0      	; 0xf74 <Dio_vidSetPinDirection+0x8>
     f74:	0f 92       	push	r0
     f76:	cd b7       	in	r28, 0x3d	; 61
     f78:	de b7       	in	r29, 0x3e	; 62
     f7a:	89 83       	std	Y+1, r24	; 0x01
     f7c:	6a 83       	std	Y+2, r22	; 0x02
     f7e:	4b 83       	std	Y+3, r20	; 0x03

	switch(Port)
     f80:	89 81       	ldd	r24, Y+1	; 0x01
     f82:	28 2f       	mov	r18, r24
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	3d 83       	std	Y+5, r19	; 0x05
     f88:	2c 83       	std	Y+4, r18	; 0x04
     f8a:	8c 81       	ldd	r24, Y+4	; 0x04
     f8c:	9d 81       	ldd	r25, Y+5	; 0x05
     f8e:	81 30       	cpi	r24, 0x01	; 1
     f90:	91 05       	cpc	r25, r1
     f92:	09 f4       	brne	.+2      	; 0xf96 <Dio_vidSetPinDirection+0x2a>
     f94:	47 c0       	rjmp	.+142    	; 0x1024 <Dio_vidSetPinDirection+0xb8>
     f96:	2c 81       	ldd	r18, Y+4	; 0x04
     f98:	3d 81       	ldd	r19, Y+5	; 0x05
     f9a:	22 30       	cpi	r18, 0x02	; 2
     f9c:	31 05       	cpc	r19, r1
     f9e:	2c f4       	brge	.+10     	; 0xfaa <Dio_vidSetPinDirection+0x3e>
     fa0:	8c 81       	ldd	r24, Y+4	; 0x04
     fa2:	9d 81       	ldd	r25, Y+5	; 0x05
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	71 f0       	breq	.+28     	; 0xfc4 <Dio_vidSetPinDirection+0x58>
     fa8:	cb c0       	rjmp	.+406    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
     faa:	2c 81       	ldd	r18, Y+4	; 0x04
     fac:	3d 81       	ldd	r19, Y+5	; 0x05
     fae:	22 30       	cpi	r18, 0x02	; 2
     fb0:	31 05       	cpc	r19, r1
     fb2:	09 f4       	brne	.+2      	; 0xfb6 <Dio_vidSetPinDirection+0x4a>
     fb4:	67 c0       	rjmp	.+206    	; 0x1084 <Dio_vidSetPinDirection+0x118>
     fb6:	8c 81       	ldd	r24, Y+4	; 0x04
     fb8:	9d 81       	ldd	r25, Y+5	; 0x05
     fba:	83 30       	cpi	r24, 0x03	; 3
     fbc:	91 05       	cpc	r25, r1
     fbe:	09 f4       	brne	.+2      	; 0xfc2 <Dio_vidSetPinDirection+0x56>
     fc0:	91 c0       	rjmp	.+290    	; 0x10e4 <Dio_vidSetPinDirection+0x178>
     fc2:	be c0       	rjmp	.+380    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
	{
	case Dio_PORTA:
		if (Direction == Dio_Input)
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	88 23       	and	r24, r24
     fc8:	a9 f4       	brne	.+42     	; 0xff4 <Dio_vidSetPinDirection+0x88>
		{
			Clear_Bit(DDRA,Pin);
     fca:	aa e3       	ldi	r26, 0x3A	; 58
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	ea e3       	ldi	r30, 0x3A	; 58
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	80 81       	ld	r24, Z
     fd4:	48 2f       	mov	r20, r24
     fd6:	8a 81       	ldd	r24, Y+2	; 0x02
     fd8:	28 2f       	mov	r18, r24
     fda:	30 e0       	ldi	r19, 0x00	; 0
     fdc:	81 e0       	ldi	r24, 0x01	; 1
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	02 2e       	mov	r0, r18
     fe2:	02 c0       	rjmp	.+4      	; 0xfe8 <Dio_vidSetPinDirection+0x7c>
     fe4:	88 0f       	add	r24, r24
     fe6:	99 1f       	adc	r25, r25
     fe8:	0a 94       	dec	r0
     fea:	e2 f7       	brpl	.-8      	; 0xfe4 <Dio_vidSetPinDirection+0x78>
     fec:	80 95       	com	r24
     fee:	84 23       	and	r24, r20
     ff0:	8c 93       	st	X, r24
     ff2:	a6 c0       	rjmp	.+332    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		}
		else if(Direction == Dio_Output)
     ff4:	8b 81       	ldd	r24, Y+3	; 0x03
     ff6:	81 30       	cpi	r24, 0x01	; 1
     ff8:	09 f0       	breq	.+2      	; 0xffc <Dio_vidSetPinDirection+0x90>
     ffa:	a2 c0       	rjmp	.+324    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		{
			Set_Bit(DDRA, Pin);
     ffc:	aa e3       	ldi	r26, 0x3A	; 58
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	ea e3       	ldi	r30, 0x3A	; 58
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	48 2f       	mov	r20, r24
    1008:	8a 81       	ldd	r24, Y+2	; 0x02
    100a:	28 2f       	mov	r18, r24
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	90 e0       	ldi	r25, 0x00	; 0
    1012:	02 2e       	mov	r0, r18
    1014:	02 c0       	rjmp	.+4      	; 0x101a <Dio_vidSetPinDirection+0xae>
    1016:	88 0f       	add	r24, r24
    1018:	99 1f       	adc	r25, r25
    101a:	0a 94       	dec	r0
    101c:	e2 f7       	brpl	.-8      	; 0x1016 <Dio_vidSetPinDirection+0xaa>
    101e:	84 2b       	or	r24, r20
    1020:	8c 93       	st	X, r24
    1022:	8e c0       	rjmp	.+284    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		}
		break;
	case Dio_PORTB:
		if (Direction == Dio_Input)
    1024:	8b 81       	ldd	r24, Y+3	; 0x03
    1026:	88 23       	and	r24, r24
    1028:	a9 f4       	brne	.+42     	; 0x1054 <Dio_vidSetPinDirection+0xe8>
		{
			Clear_Bit(DDRB, Pin);
    102a:	a7 e3       	ldi	r26, 0x37	; 55
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e7 e3       	ldi	r30, 0x37	; 55
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <Dio_vidSetPinDirection+0xdc>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <Dio_vidSetPinDirection+0xd8>
    104c:	80 95       	com	r24
    104e:	84 23       	and	r24, r20
    1050:	8c 93       	st	X, r24
    1052:	76 c0       	rjmp	.+236    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		}
		else if(Direction == Dio_Output)
    1054:	8b 81       	ldd	r24, Y+3	; 0x03
    1056:	81 30       	cpi	r24, 0x01	; 1
    1058:	09 f0       	breq	.+2      	; 0x105c <Dio_vidSetPinDirection+0xf0>
    105a:	72 c0       	rjmp	.+228    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		{
			Set_Bit(DDRB, Pin);
    105c:	a7 e3       	ldi	r26, 0x37	; 55
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e7 e3       	ldi	r30, 0x37	; 55
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	48 2f       	mov	r20, r24
    1068:	8a 81       	ldd	r24, Y+2	; 0x02
    106a:	28 2f       	mov	r18, r24
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	81 e0       	ldi	r24, 0x01	; 1
    1070:	90 e0       	ldi	r25, 0x00	; 0
    1072:	02 2e       	mov	r0, r18
    1074:	02 c0       	rjmp	.+4      	; 0x107a <Dio_vidSetPinDirection+0x10e>
    1076:	88 0f       	add	r24, r24
    1078:	99 1f       	adc	r25, r25
    107a:	0a 94       	dec	r0
    107c:	e2 f7       	brpl	.-8      	; 0x1076 <Dio_vidSetPinDirection+0x10a>
    107e:	84 2b       	or	r24, r20
    1080:	8c 93       	st	X, r24
    1082:	5e c0       	rjmp	.+188    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		}
		break;
	case Dio_PORTC:
		if (Direction == Dio_Input)
    1084:	8b 81       	ldd	r24, Y+3	; 0x03
    1086:	88 23       	and	r24, r24
    1088:	a9 f4       	brne	.+42     	; 0x10b4 <Dio_vidSetPinDirection+0x148>
		{
			Clear_Bit(DDRC, Pin);
    108a:	a4 e3       	ldi	r26, 0x34	; 52
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e3       	ldi	r30, 0x34	; 52
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	48 2f       	mov	r20, r24
    1096:	8a 81       	ldd	r24, Y+2	; 0x02
    1098:	28 2f       	mov	r18, r24
    109a:	30 e0       	ldi	r19, 0x00	; 0
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	90 e0       	ldi	r25, 0x00	; 0
    10a0:	02 2e       	mov	r0, r18
    10a2:	02 c0       	rjmp	.+4      	; 0x10a8 <Dio_vidSetPinDirection+0x13c>
    10a4:	88 0f       	add	r24, r24
    10a6:	99 1f       	adc	r25, r25
    10a8:	0a 94       	dec	r0
    10aa:	e2 f7       	brpl	.-8      	; 0x10a4 <Dio_vidSetPinDirection+0x138>
    10ac:	80 95       	com	r24
    10ae:	84 23       	and	r24, r20
    10b0:	8c 93       	st	X, r24
    10b2:	46 c0       	rjmp	.+140    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		}
		else if(Direction == Dio_Output)
    10b4:	8b 81       	ldd	r24, Y+3	; 0x03
    10b6:	81 30       	cpi	r24, 0x01	; 1
    10b8:	09 f0       	breq	.+2      	; 0x10bc <Dio_vidSetPinDirection+0x150>
    10ba:	42 c0       	rjmp	.+132    	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		{
			Set_Bit(DDRC, Pin);
    10bc:	a4 e3       	ldi	r26, 0x34	; 52
    10be:	b0 e0       	ldi	r27, 0x00	; 0
    10c0:	e4 e3       	ldi	r30, 0x34	; 52
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	80 81       	ld	r24, Z
    10c6:	48 2f       	mov	r20, r24
    10c8:	8a 81       	ldd	r24, Y+2	; 0x02
    10ca:	28 2f       	mov	r18, r24
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	81 e0       	ldi	r24, 0x01	; 1
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	02 2e       	mov	r0, r18
    10d4:	02 c0       	rjmp	.+4      	; 0x10da <Dio_vidSetPinDirection+0x16e>
    10d6:	88 0f       	add	r24, r24
    10d8:	99 1f       	adc	r25, r25
    10da:	0a 94       	dec	r0
    10dc:	e2 f7       	brpl	.-8      	; 0x10d6 <Dio_vidSetPinDirection+0x16a>
    10de:	84 2b       	or	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	2e c0       	rjmp	.+92     	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		}
		break;
	case Dio_PORTD:
		if (Direction == Dio_Input)
    10e4:	8b 81       	ldd	r24, Y+3	; 0x03
    10e6:	88 23       	and	r24, r24
    10e8:	a9 f4       	brne	.+42     	; 0x1114 <Dio_vidSetPinDirection+0x1a8>
		{
			Clear_Bit(DDRD, Pin);
    10ea:	a1 e3       	ldi	r26, 0x31	; 49
    10ec:	b0 e0       	ldi	r27, 0x00	; 0
    10ee:	e1 e3       	ldi	r30, 0x31	; 49
    10f0:	f0 e0       	ldi	r31, 0x00	; 0
    10f2:	80 81       	ld	r24, Z
    10f4:	48 2f       	mov	r20, r24
    10f6:	8a 81       	ldd	r24, Y+2	; 0x02
    10f8:	28 2f       	mov	r18, r24
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	81 e0       	ldi	r24, 0x01	; 1
    10fe:	90 e0       	ldi	r25, 0x00	; 0
    1100:	02 2e       	mov	r0, r18
    1102:	02 c0       	rjmp	.+4      	; 0x1108 <Dio_vidSetPinDirection+0x19c>
    1104:	88 0f       	add	r24, r24
    1106:	99 1f       	adc	r25, r25
    1108:	0a 94       	dec	r0
    110a:	e2 f7       	brpl	.-8      	; 0x1104 <Dio_vidSetPinDirection+0x198>
    110c:	80 95       	com	r24
    110e:	84 23       	and	r24, r20
    1110:	8c 93       	st	X, r24
    1112:	16 c0       	rjmp	.+44     	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		}
		else if(Direction == Dio_Output)
    1114:	8b 81       	ldd	r24, Y+3	; 0x03
    1116:	81 30       	cpi	r24, 0x01	; 1
    1118:	99 f4       	brne	.+38     	; 0x1140 <Dio_vidSetPinDirection+0x1d4>
		{
			Set_Bit(DDRD, Pin);
    111a:	a1 e3       	ldi	r26, 0x31	; 49
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e1 e3       	ldi	r30, 0x31	; 49
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <Dio_vidSetPinDirection+0x1cc>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <Dio_vidSetPinDirection+0x1c8>
    113c:	84 2b       	or	r24, r20
    113e:	8c 93       	st	X, r24
		}
		break;
	}
}
    1140:	0f 90       	pop	r0
    1142:	0f 90       	pop	r0
    1144:	0f 90       	pop	r0
    1146:	0f 90       	pop	r0
    1148:	0f 90       	pop	r0
    114a:	cf 91       	pop	r28
    114c:	df 91       	pop	r29
    114e:	08 95       	ret

00001150 <Dio_vidSetPortDirection>:

void Dio_vidSetPortDirection(enuPortType Port, enuPortDirection Direction)
{
    1150:	df 93       	push	r29
    1152:	cf 93       	push	r28
    1154:	00 d0       	rcall	.+0      	; 0x1156 <Dio_vidSetPortDirection+0x6>
    1156:	00 d0       	rcall	.+0      	; 0x1158 <Dio_vidSetPortDirection+0x8>
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	89 83       	std	Y+1, r24	; 0x01
    115e:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1160:	89 81       	ldd	r24, Y+1	; 0x01
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	3c 83       	std	Y+4, r19	; 0x04
    1168:	2b 83       	std	Y+3, r18	; 0x03
    116a:	8b 81       	ldd	r24, Y+3	; 0x03
    116c:	9c 81       	ldd	r25, Y+4	; 0x04
    116e:	81 30       	cpi	r24, 0x01	; 1
    1170:	91 05       	cpc	r25, r1
    1172:	21 f1       	breq	.+72     	; 0x11bc <Dio_vidSetPortDirection+0x6c>
    1174:	2b 81       	ldd	r18, Y+3	; 0x03
    1176:	3c 81       	ldd	r19, Y+4	; 0x04
    1178:	22 30       	cpi	r18, 0x02	; 2
    117a:	31 05       	cpc	r19, r1
    117c:	2c f4       	brge	.+10     	; 0x1188 <Dio_vidSetPortDirection+0x38>
    117e:	8b 81       	ldd	r24, Y+3	; 0x03
    1180:	9c 81       	ldd	r25, Y+4	; 0x04
    1182:	00 97       	sbiw	r24, 0x00	; 0
    1184:	61 f0       	breq	.+24     	; 0x119e <Dio_vidSetPortDirection+0x4e>
    1186:	46 c0       	rjmp	.+140    	; 0x1214 <Dio_vidSetPortDirection+0xc4>
    1188:	2b 81       	ldd	r18, Y+3	; 0x03
    118a:	3c 81       	ldd	r19, Y+4	; 0x04
    118c:	22 30       	cpi	r18, 0x02	; 2
    118e:	31 05       	cpc	r19, r1
    1190:	21 f1       	breq	.+72     	; 0x11da <Dio_vidSetPortDirection+0x8a>
    1192:	8b 81       	ldd	r24, Y+3	; 0x03
    1194:	9c 81       	ldd	r25, Y+4	; 0x04
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	91 05       	cpc	r25, r1
    119a:	71 f1       	breq	.+92     	; 0x11f8 <Dio_vidSetPortDirection+0xa8>
    119c:	3b c0       	rjmp	.+118    	; 0x1214 <Dio_vidSetPortDirection+0xc4>
	{
	case Dio_PORTA:
		if (Direction == Dio_Input)
    119e:	8a 81       	ldd	r24, Y+2	; 0x02
    11a0:	88 23       	and	r24, r24
    11a2:	21 f4       	brne	.+8      	; 0x11ac <Dio_vidSetPortDirection+0x5c>
		{
			DDRA = 0x00;
    11a4:	ea e3       	ldi	r30, 0x3A	; 58
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	10 82       	st	Z, r1
    11aa:	34 c0       	rjmp	.+104    	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		}
		else if(Direction == Dio_Output)
    11ac:	8a 81       	ldd	r24, Y+2	; 0x02
    11ae:	81 30       	cpi	r24, 0x01	; 1
    11b0:	89 f5       	brne	.+98     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		{
			DDRA = 0xFF;
    11b2:	ea e3       	ldi	r30, 0x3A	; 58
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	8f ef       	ldi	r24, 0xFF	; 255
    11b8:	80 83       	st	Z, r24
    11ba:	2c c0       	rjmp	.+88     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		}
		break;
	case Dio_PORTB:
		if (Direction == Dio_Input)
    11bc:	8a 81       	ldd	r24, Y+2	; 0x02
    11be:	88 23       	and	r24, r24
    11c0:	21 f4       	brne	.+8      	; 0x11ca <Dio_vidSetPortDirection+0x7a>
		{
			DDRB = 0x00;
    11c2:	e7 e3       	ldi	r30, 0x37	; 55
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	10 82       	st	Z, r1
    11c8:	25 c0       	rjmp	.+74     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		}
		else if(Direction == Dio_Output)
    11ca:	8a 81       	ldd	r24, Y+2	; 0x02
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	11 f5       	brne	.+68     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		{
			DDRB = 0xFF;
    11d0:	e7 e3       	ldi	r30, 0x37	; 55
    11d2:	f0 e0       	ldi	r31, 0x00	; 0
    11d4:	8f ef       	ldi	r24, 0xFF	; 255
    11d6:	80 83       	st	Z, r24
    11d8:	1d c0       	rjmp	.+58     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		}

		break;
	case Dio_PORTC:
		if (Direction == Dio_Input)
    11da:	8a 81       	ldd	r24, Y+2	; 0x02
    11dc:	88 23       	and	r24, r24
    11de:	21 f4       	brne	.+8      	; 0x11e8 <Dio_vidSetPortDirection+0x98>
		{
			DDRC = 0x00;
    11e0:	e4 e3       	ldi	r30, 0x34	; 52
    11e2:	f0 e0       	ldi	r31, 0x00	; 0
    11e4:	10 82       	st	Z, r1
    11e6:	16 c0       	rjmp	.+44     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		}
		else if(Direction == Dio_Output)
    11e8:	8a 81       	ldd	r24, Y+2	; 0x02
    11ea:	81 30       	cpi	r24, 0x01	; 1
    11ec:	99 f4       	brne	.+38     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		{
			DDRC = 0xFF;
    11ee:	e4 e3       	ldi	r30, 0x34	; 52
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	8f ef       	ldi	r24, 0xFF	; 255
    11f4:	80 83       	st	Z, r24
    11f6:	0e c0       	rjmp	.+28     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		}

		break;
	case Dio_PORTD:
		if (Direction == Dio_Input)
    11f8:	8a 81       	ldd	r24, Y+2	; 0x02
    11fa:	88 23       	and	r24, r24
    11fc:	21 f4       	brne	.+8      	; 0x1206 <Dio_vidSetPortDirection+0xb6>
		{
			DDRD = 0x00;
    11fe:	e1 e3       	ldi	r30, 0x31	; 49
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	10 82       	st	Z, r1
    1204:	07 c0       	rjmp	.+14     	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		}
		else if(Direction == Dio_Output)
    1206:	8a 81       	ldd	r24, Y+2	; 0x02
    1208:	81 30       	cpi	r24, 0x01	; 1
    120a:	21 f4       	brne	.+8      	; 0x1214 <Dio_vidSetPortDirection+0xc4>
		{
			DDRD = 0xFF;
    120c:	e1 e3       	ldi	r30, 0x31	; 49
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	8f ef       	ldi	r24, 0xFF	; 255
    1212:	80 83       	st	Z, r24
		}
		break;

	}
}
    1214:	0f 90       	pop	r0
    1216:	0f 90       	pop	r0
    1218:	0f 90       	pop	r0
    121a:	0f 90       	pop	r0
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <Dio_vidWritePin>:

void Dio_vidWritePin(enuPortType Port, uint8_t Pin, enuPinState State)
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	00 d0       	rcall	.+0      	; 0x1228 <Dio_vidWritePin+0x6>
    1228:	00 d0       	rcall	.+0      	; 0x122a <Dio_vidWritePin+0x8>
    122a:	0f 92       	push	r0
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	89 83       	std	Y+1, r24	; 0x01
    1232:	6a 83       	std	Y+2, r22	; 0x02
    1234:	4b 83       	std	Y+3, r20	; 0x03
	switch(Port)
    1236:	89 81       	ldd	r24, Y+1	; 0x01
    1238:	28 2f       	mov	r18, r24
    123a:	30 e0       	ldi	r19, 0x00	; 0
    123c:	3d 83       	std	Y+5, r19	; 0x05
    123e:	2c 83       	std	Y+4, r18	; 0x04
    1240:	8c 81       	ldd	r24, Y+4	; 0x04
    1242:	9d 81       	ldd	r25, Y+5	; 0x05
    1244:	81 30       	cpi	r24, 0x01	; 1
    1246:	91 05       	cpc	r25, r1
    1248:	09 f4       	brne	.+2      	; 0x124c <Dio_vidWritePin+0x2a>
    124a:	47 c0       	rjmp	.+142    	; 0x12da <Dio_vidWritePin+0xb8>
    124c:	2c 81       	ldd	r18, Y+4	; 0x04
    124e:	3d 81       	ldd	r19, Y+5	; 0x05
    1250:	22 30       	cpi	r18, 0x02	; 2
    1252:	31 05       	cpc	r19, r1
    1254:	2c f4       	brge	.+10     	; 0x1260 <Dio_vidWritePin+0x3e>
    1256:	8c 81       	ldd	r24, Y+4	; 0x04
    1258:	9d 81       	ldd	r25, Y+5	; 0x05
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	71 f0       	breq	.+28     	; 0x127a <Dio_vidWritePin+0x58>
    125e:	cb c0       	rjmp	.+406    	; 0x13f6 <Dio_vidWritePin+0x1d4>
    1260:	2c 81       	ldd	r18, Y+4	; 0x04
    1262:	3d 81       	ldd	r19, Y+5	; 0x05
    1264:	22 30       	cpi	r18, 0x02	; 2
    1266:	31 05       	cpc	r19, r1
    1268:	09 f4       	brne	.+2      	; 0x126c <Dio_vidWritePin+0x4a>
    126a:	67 c0       	rjmp	.+206    	; 0x133a <Dio_vidWritePin+0x118>
    126c:	8c 81       	ldd	r24, Y+4	; 0x04
    126e:	9d 81       	ldd	r25, Y+5	; 0x05
    1270:	83 30       	cpi	r24, 0x03	; 3
    1272:	91 05       	cpc	r25, r1
    1274:	09 f4       	brne	.+2      	; 0x1278 <Dio_vidWritePin+0x56>
    1276:	91 c0       	rjmp	.+290    	; 0x139a <Dio_vidWritePin+0x178>
    1278:	be c0       	rjmp	.+380    	; 0x13f6 <Dio_vidWritePin+0x1d4>
	{
	case Dio_PORTA:
		if(State == Dio_High)
    127a:	8b 81       	ldd	r24, Y+3	; 0x03
    127c:	81 30       	cpi	r24, 0x01	; 1
    127e:	a1 f4       	brne	.+40     	; 0x12a8 <Dio_vidWritePin+0x86>
		{
			Set_Bit(PORTA, Pin);
    1280:	ab e3       	ldi	r26, 0x3B	; 59
    1282:	b0 e0       	ldi	r27, 0x00	; 0
    1284:	eb e3       	ldi	r30, 0x3B	; 59
    1286:	f0 e0       	ldi	r31, 0x00	; 0
    1288:	80 81       	ld	r24, Z
    128a:	48 2f       	mov	r20, r24
    128c:	8a 81       	ldd	r24, Y+2	; 0x02
    128e:	28 2f       	mov	r18, r24
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	90 e0       	ldi	r25, 0x00	; 0
    1296:	02 2e       	mov	r0, r18
    1298:	02 c0       	rjmp	.+4      	; 0x129e <Dio_vidWritePin+0x7c>
    129a:	88 0f       	add	r24, r24
    129c:	99 1f       	adc	r25, r25
    129e:	0a 94       	dec	r0
    12a0:	e2 f7       	brpl	.-8      	; 0x129a <Dio_vidWritePin+0x78>
    12a2:	84 2b       	or	r24, r20
    12a4:	8c 93       	st	X, r24
    12a6:	a7 c0       	rjmp	.+334    	; 0x13f6 <Dio_vidWritePin+0x1d4>
		}
		else if(State == Dio_Low)
    12a8:	8b 81       	ldd	r24, Y+3	; 0x03
    12aa:	88 23       	and	r24, r24
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <Dio_vidWritePin+0x8e>
    12ae:	a3 c0       	rjmp	.+326    	; 0x13f6 <Dio_vidWritePin+0x1d4>
		{
			Clear_Bit(PORTA, Pin);
    12b0:	ab e3       	ldi	r26, 0x3B	; 59
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	eb e3       	ldi	r30, 0x3B	; 59
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	80 81       	ld	r24, Z
    12ba:	48 2f       	mov	r20, r24
    12bc:	8a 81       	ldd	r24, Y+2	; 0x02
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	81 e0       	ldi	r24, 0x01	; 1
    12c4:	90 e0       	ldi	r25, 0x00	; 0
    12c6:	02 2e       	mov	r0, r18
    12c8:	02 c0       	rjmp	.+4      	; 0x12ce <Dio_vidWritePin+0xac>
    12ca:	88 0f       	add	r24, r24
    12cc:	99 1f       	adc	r25, r25
    12ce:	0a 94       	dec	r0
    12d0:	e2 f7       	brpl	.-8      	; 0x12ca <Dio_vidWritePin+0xa8>
    12d2:	80 95       	com	r24
    12d4:	84 23       	and	r24, r20
    12d6:	8c 93       	st	X, r24
    12d8:	8e c0       	rjmp	.+284    	; 0x13f6 <Dio_vidWritePin+0x1d4>
		}
		break;
	case Dio_PORTB:
		if(State == Dio_High)
    12da:	8b 81       	ldd	r24, Y+3	; 0x03
    12dc:	81 30       	cpi	r24, 0x01	; 1
    12de:	a1 f4       	brne	.+40     	; 0x1308 <Dio_vidWritePin+0xe6>
		{
			Set_Bit(PORTB, Pin);
    12e0:	a8 e3       	ldi	r26, 0x38	; 56
    12e2:	b0 e0       	ldi	r27, 0x00	; 0
    12e4:	e8 e3       	ldi	r30, 0x38	; 56
    12e6:	f0 e0       	ldi	r31, 0x00	; 0
    12e8:	80 81       	ld	r24, Z
    12ea:	48 2f       	mov	r20, r24
    12ec:	8a 81       	ldd	r24, Y+2	; 0x02
    12ee:	28 2f       	mov	r18, r24
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	02 2e       	mov	r0, r18
    12f8:	02 c0       	rjmp	.+4      	; 0x12fe <Dio_vidWritePin+0xdc>
    12fa:	88 0f       	add	r24, r24
    12fc:	99 1f       	adc	r25, r25
    12fe:	0a 94       	dec	r0
    1300:	e2 f7       	brpl	.-8      	; 0x12fa <Dio_vidWritePin+0xd8>
    1302:	84 2b       	or	r24, r20
    1304:	8c 93       	st	X, r24
    1306:	77 c0       	rjmp	.+238    	; 0x13f6 <Dio_vidWritePin+0x1d4>
		}
		else if(State == Dio_Low)
    1308:	8b 81       	ldd	r24, Y+3	; 0x03
    130a:	88 23       	and	r24, r24
    130c:	09 f0       	breq	.+2      	; 0x1310 <Dio_vidWritePin+0xee>
    130e:	73 c0       	rjmp	.+230    	; 0x13f6 <Dio_vidWritePin+0x1d4>
		{
			Clear_Bit(PORTB, Pin);
    1310:	a8 e3       	ldi	r26, 0x38	; 56
    1312:	b0 e0       	ldi	r27, 0x00	; 0
    1314:	e8 e3       	ldi	r30, 0x38	; 56
    1316:	f0 e0       	ldi	r31, 0x00	; 0
    1318:	80 81       	ld	r24, Z
    131a:	48 2f       	mov	r20, r24
    131c:	8a 81       	ldd	r24, Y+2	; 0x02
    131e:	28 2f       	mov	r18, r24
    1320:	30 e0       	ldi	r19, 0x00	; 0
    1322:	81 e0       	ldi	r24, 0x01	; 1
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	02 2e       	mov	r0, r18
    1328:	02 c0       	rjmp	.+4      	; 0x132e <Dio_vidWritePin+0x10c>
    132a:	88 0f       	add	r24, r24
    132c:	99 1f       	adc	r25, r25
    132e:	0a 94       	dec	r0
    1330:	e2 f7       	brpl	.-8      	; 0x132a <Dio_vidWritePin+0x108>
    1332:	80 95       	com	r24
    1334:	84 23       	and	r24, r20
    1336:	8c 93       	st	X, r24
    1338:	5e c0       	rjmp	.+188    	; 0x13f6 <Dio_vidWritePin+0x1d4>
		}
		break;
	case Dio_PORTC:
		if(State == Dio_High)
    133a:	8b 81       	ldd	r24, Y+3	; 0x03
    133c:	81 30       	cpi	r24, 0x01	; 1
    133e:	a1 f4       	brne	.+40     	; 0x1368 <Dio_vidWritePin+0x146>
		{
			Set_Bit(PORTC, Pin);
    1340:	a5 e3       	ldi	r26, 0x35	; 53
    1342:	b0 e0       	ldi	r27, 0x00	; 0
    1344:	e5 e3       	ldi	r30, 0x35	; 53
    1346:	f0 e0       	ldi	r31, 0x00	; 0
    1348:	80 81       	ld	r24, Z
    134a:	48 2f       	mov	r20, r24
    134c:	8a 81       	ldd	r24, Y+2	; 0x02
    134e:	28 2f       	mov	r18, r24
    1350:	30 e0       	ldi	r19, 0x00	; 0
    1352:	81 e0       	ldi	r24, 0x01	; 1
    1354:	90 e0       	ldi	r25, 0x00	; 0
    1356:	02 2e       	mov	r0, r18
    1358:	02 c0       	rjmp	.+4      	; 0x135e <Dio_vidWritePin+0x13c>
    135a:	88 0f       	add	r24, r24
    135c:	99 1f       	adc	r25, r25
    135e:	0a 94       	dec	r0
    1360:	e2 f7       	brpl	.-8      	; 0x135a <Dio_vidWritePin+0x138>
    1362:	84 2b       	or	r24, r20
    1364:	8c 93       	st	X, r24
    1366:	47 c0       	rjmp	.+142    	; 0x13f6 <Dio_vidWritePin+0x1d4>
		}
		else if(State == Dio_Low)
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	88 23       	and	r24, r24
    136c:	09 f0       	breq	.+2      	; 0x1370 <Dio_vidWritePin+0x14e>
    136e:	43 c0       	rjmp	.+134    	; 0x13f6 <Dio_vidWritePin+0x1d4>
		{
			Clear_Bit(PORTC, Pin);
    1370:	a5 e3       	ldi	r26, 0x35	; 53
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e5 e3       	ldi	r30, 0x35	; 53
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8a 81       	ldd	r24, Y+2	; 0x02
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <Dio_vidWritePin+0x16c>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <Dio_vidWritePin+0x168>
    1392:	80 95       	com	r24
    1394:	84 23       	and	r24, r20
    1396:	8c 93       	st	X, r24
    1398:	2e c0       	rjmp	.+92     	; 0x13f6 <Dio_vidWritePin+0x1d4>
		}
		break;

	case Dio_PORTD:
		if(State == Dio_High)
    139a:	8b 81       	ldd	r24, Y+3	; 0x03
    139c:	81 30       	cpi	r24, 0x01	; 1
    139e:	a1 f4       	brne	.+40     	; 0x13c8 <Dio_vidWritePin+0x1a6>
		{
			Set_Bit(PORTD, Pin);
    13a0:	a2 e3       	ldi	r26, 0x32	; 50
    13a2:	b0 e0       	ldi	r27, 0x00	; 0
    13a4:	e2 e3       	ldi	r30, 0x32	; 50
    13a6:	f0 e0       	ldi	r31, 0x00	; 0
    13a8:	80 81       	ld	r24, Z
    13aa:	48 2f       	mov	r20, r24
    13ac:	8a 81       	ldd	r24, Y+2	; 0x02
    13ae:	28 2f       	mov	r18, r24
    13b0:	30 e0       	ldi	r19, 0x00	; 0
    13b2:	81 e0       	ldi	r24, 0x01	; 1
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	02 2e       	mov	r0, r18
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <Dio_vidWritePin+0x19c>
    13ba:	88 0f       	add	r24, r24
    13bc:	99 1f       	adc	r25, r25
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <Dio_vidWritePin+0x198>
    13c2:	84 2b       	or	r24, r20
    13c4:	8c 93       	st	X, r24
    13c6:	17 c0       	rjmp	.+46     	; 0x13f6 <Dio_vidWritePin+0x1d4>
		}
		else if(State == Dio_Low)
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	88 23       	and	r24, r24
    13cc:	a1 f4       	brne	.+40     	; 0x13f6 <Dio_vidWritePin+0x1d4>
		{
			Clear_Bit(PORTD, Pin);
    13ce:	a2 e3       	ldi	r26, 0x32	; 50
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	e2 e3       	ldi	r30, 0x32	; 50
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	80 81       	ld	r24, Z
    13d8:	48 2f       	mov	r20, r24
    13da:	8a 81       	ldd	r24, Y+2	; 0x02
    13dc:	28 2f       	mov	r18, r24
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	02 2e       	mov	r0, r18
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <Dio_vidWritePin+0x1ca>
    13e8:	88 0f       	add	r24, r24
    13ea:	99 1f       	adc	r25, r25
    13ec:	0a 94       	dec	r0
    13ee:	e2 f7       	brpl	.-8      	; 0x13e8 <Dio_vidWritePin+0x1c6>
    13f0:	80 95       	com	r24
    13f2:	84 23       	and	r24, r20
    13f4:	8c 93       	st	X, r24
		}
		break;
	}
}
    13f6:	0f 90       	pop	r0
    13f8:	0f 90       	pop	r0
    13fa:	0f 90       	pop	r0
    13fc:	0f 90       	pop	r0
    13fe:	0f 90       	pop	r0
    1400:	cf 91       	pop	r28
    1402:	df 91       	pop	r29
    1404:	08 95       	ret

00001406 <Dio_vidWritePort>:

void Dio_vidWritePort(enuPortType Port, uint8_t Value)
{
    1406:	df 93       	push	r29
    1408:	cf 93       	push	r28
    140a:	00 d0       	rcall	.+0      	; 0x140c <Dio_vidWritePort+0x6>
    140c:	00 d0       	rcall	.+0      	; 0x140e <Dio_vidWritePort+0x8>
    140e:	cd b7       	in	r28, 0x3d	; 61
    1410:	de b7       	in	r29, 0x3e	; 62
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    1416:	89 81       	ldd	r24, Y+1	; 0x01
    1418:	28 2f       	mov	r18, r24
    141a:	30 e0       	ldi	r19, 0x00	; 0
    141c:	3c 83       	std	Y+4, r19	; 0x04
    141e:	2b 83       	std	Y+3, r18	; 0x03
    1420:	8b 81       	ldd	r24, Y+3	; 0x03
    1422:	9c 81       	ldd	r25, Y+4	; 0x04
    1424:	81 30       	cpi	r24, 0x01	; 1
    1426:	91 05       	cpc	r25, r1
    1428:	d1 f0       	breq	.+52     	; 0x145e <Dio_vidWritePort+0x58>
    142a:	2b 81       	ldd	r18, Y+3	; 0x03
    142c:	3c 81       	ldd	r19, Y+4	; 0x04
    142e:	22 30       	cpi	r18, 0x02	; 2
    1430:	31 05       	cpc	r19, r1
    1432:	2c f4       	brge	.+10     	; 0x143e <Dio_vidWritePort+0x38>
    1434:	8b 81       	ldd	r24, Y+3	; 0x03
    1436:	9c 81       	ldd	r25, Y+4	; 0x04
    1438:	00 97       	sbiw	r24, 0x00	; 0
    143a:	61 f0       	breq	.+24     	; 0x1454 <Dio_vidWritePort+0x4e>
    143c:	1e c0       	rjmp	.+60     	; 0x147a <Dio_vidWritePort+0x74>
    143e:	2b 81       	ldd	r18, Y+3	; 0x03
    1440:	3c 81       	ldd	r19, Y+4	; 0x04
    1442:	22 30       	cpi	r18, 0x02	; 2
    1444:	31 05       	cpc	r19, r1
    1446:	81 f0       	breq	.+32     	; 0x1468 <Dio_vidWritePort+0x62>
    1448:	8b 81       	ldd	r24, Y+3	; 0x03
    144a:	9c 81       	ldd	r25, Y+4	; 0x04
    144c:	83 30       	cpi	r24, 0x03	; 3
    144e:	91 05       	cpc	r25, r1
    1450:	81 f0       	breq	.+32     	; 0x1472 <Dio_vidWritePort+0x6c>
    1452:	13 c0       	rjmp	.+38     	; 0x147a <Dio_vidWritePort+0x74>
	{
	case Dio_PORTA:
		PORTA = Value;
    1454:	eb e3       	ldi	r30, 0x3B	; 59
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	8a 81       	ldd	r24, Y+2	; 0x02
    145a:	80 83       	st	Z, r24
    145c:	0e c0       	rjmp	.+28     	; 0x147a <Dio_vidWritePort+0x74>
		break;
	case Dio_PORTB:
		PORTB = Value;
    145e:	e8 e3       	ldi	r30, 0x38	; 56
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	8a 81       	ldd	r24, Y+2	; 0x02
    1464:	80 83       	st	Z, r24
    1466:	09 c0       	rjmp	.+18     	; 0x147a <Dio_vidWritePort+0x74>
		break;
	case Dio_PORTC:
		PORTC = Value;
    1468:	e5 e3       	ldi	r30, 0x35	; 53
    146a:	f0 e0       	ldi	r31, 0x00	; 0
    146c:	8a 81       	ldd	r24, Y+2	; 0x02
    146e:	80 83       	st	Z, r24
    1470:	04 c0       	rjmp	.+8      	; 0x147a <Dio_vidWritePort+0x74>
		break;
	case Dio_PORTD:
		PORTD = Value;
    1472:	e2 e3       	ldi	r30, 0x32	; 50
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	8a 81       	ldd	r24, Y+2	; 0x02
    1478:	80 83       	st	Z, r24
		break;
	}

}
    147a:	0f 90       	pop	r0
    147c:	0f 90       	pop	r0
    147e:	0f 90       	pop	r0
    1480:	0f 90       	pop	r0
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <Dio_u8ReadPin>:

uint8_t Dio_u8ReadPin(enuPortType Port, uint8_t Pin)
{
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	00 d0       	rcall	.+0      	; 0x148e <Dio_u8ReadPin+0x6>
    148e:	00 d0       	rcall	.+0      	; 0x1490 <Dio_u8ReadPin+0x8>
    1490:	0f 92       	push	r0
    1492:	cd b7       	in	r28, 0x3d	; 61
    1494:	de b7       	in	r29, 0x3e	; 62
    1496:	8a 83       	std	Y+2, r24	; 0x02
    1498:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t Result = 0;
    149a:	19 82       	std	Y+1, r1	; 0x01

	switch(Port)
    149c:	8a 81       	ldd	r24, Y+2	; 0x02
    149e:	28 2f       	mov	r18, r24
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	3d 83       	std	Y+5, r19	; 0x05
    14a4:	2c 83       	std	Y+4, r18	; 0x04
    14a6:	4c 81       	ldd	r20, Y+4	; 0x04
    14a8:	5d 81       	ldd	r21, Y+5	; 0x05
    14aa:	41 30       	cpi	r20, 0x01	; 1
    14ac:	51 05       	cpc	r21, r1
    14ae:	09 f4       	brne	.+2      	; 0x14b2 <Dio_u8ReadPin+0x2a>
    14b0:	63 c0       	rjmp	.+198    	; 0x1578 <Dio_u8ReadPin+0xf0>
    14b2:	8c 81       	ldd	r24, Y+4	; 0x04
    14b4:	9d 81       	ldd	r25, Y+5	; 0x05
    14b6:	82 30       	cpi	r24, 0x02	; 2
    14b8:	91 05       	cpc	r25, r1
    14ba:	34 f4       	brge	.+12     	; 0x14c8 <Dio_u8ReadPin+0x40>
    14bc:	2c 81       	ldd	r18, Y+4	; 0x04
    14be:	3d 81       	ldd	r19, Y+5	; 0x05
    14c0:	21 15       	cp	r18, r1
    14c2:	31 05       	cpc	r19, r1
    14c4:	71 f0       	breq	.+28     	; 0x14e2 <Dio_u8ReadPin+0x5a>
    14c6:	37 c1       	rjmp	.+622    	; 0x1736 <Dio_u8ReadPin+0x2ae>
    14c8:	4c 81       	ldd	r20, Y+4	; 0x04
    14ca:	5d 81       	ldd	r21, Y+5	; 0x05
    14cc:	42 30       	cpi	r20, 0x02	; 2
    14ce:	51 05       	cpc	r21, r1
    14d0:	09 f4       	brne	.+2      	; 0x14d4 <Dio_u8ReadPin+0x4c>
    14d2:	9d c0       	rjmp	.+314    	; 0x160e <Dio_u8ReadPin+0x186>
    14d4:	8c 81       	ldd	r24, Y+4	; 0x04
    14d6:	9d 81       	ldd	r25, Y+5	; 0x05
    14d8:	83 30       	cpi	r24, 0x03	; 3
    14da:	91 05       	cpc	r25, r1
    14dc:	09 f4       	brne	.+2      	; 0x14e0 <Dio_u8ReadPin+0x58>
    14de:	e2 c0       	rjmp	.+452    	; 0x16a4 <Dio_u8ReadPin+0x21c>
    14e0:	2a c1       	rjmp	.+596    	; 0x1736 <Dio_u8ReadPin+0x2ae>
	{
	case Dio_PORTA:
		if(Get_Bit(DDRA, Pin) == 1)
    14e2:	ea e3       	ldi	r30, 0x3A	; 58
    14e4:	f0 e0       	ldi	r31, 0x00	; 0
    14e6:	80 81       	ld	r24, Z
    14e8:	28 2f       	mov	r18, r24
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	8b 81       	ldd	r24, Y+3	; 0x03
    14ee:	88 2f       	mov	r24, r24
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	a9 01       	movw	r20, r18
    14f4:	02 c0       	rjmp	.+4      	; 0x14fa <Dio_u8ReadPin+0x72>
    14f6:	55 95       	asr	r21
    14f8:	47 95       	ror	r20
    14fa:	8a 95       	dec	r24
    14fc:	e2 f7       	brpl	.-8      	; 0x14f6 <Dio_u8ReadPin+0x6e>
    14fe:	ca 01       	movw	r24, r20
    1500:	81 70       	andi	r24, 0x01	; 1
    1502:	90 70       	andi	r25, 0x00	; 0
    1504:	88 23       	and	r24, r24
    1506:	91 f0       	breq	.+36     	; 0x152c <Dio_u8ReadPin+0xa4>
		{
			/*The required Port is output*/
			Result = Get_Bit(PORTA, Pin);
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	28 2f       	mov	r18, r24
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	88 2f       	mov	r24, r24
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	a9 01       	movw	r20, r18
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <Dio_u8ReadPin+0x98>
    151c:	55 95       	asr	r21
    151e:	47 95       	ror	r20
    1520:	8a 95       	dec	r24
    1522:	e2 f7       	brpl	.-8      	; 0x151c <Dio_u8ReadPin+0x94>
    1524:	ca 01       	movw	r24, r20
    1526:	81 70       	andi	r24, 0x01	; 1
    1528:	89 83       	std	Y+1, r24	; 0x01
    152a:	05 c1       	rjmp	.+522    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		}
		else if(Get_Bit(DDRA, Pin) == 0)
    152c:	ea e3       	ldi	r30, 0x3A	; 58
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	8b 81       	ldd	r24, Y+3	; 0x03
    1538:	88 2f       	mov	r24, r24
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	a9 01       	movw	r20, r18
    153e:	02 c0       	rjmp	.+4      	; 0x1544 <Dio_u8ReadPin+0xbc>
    1540:	55 95       	asr	r21
    1542:	47 95       	ror	r20
    1544:	8a 95       	dec	r24
    1546:	e2 f7       	brpl	.-8      	; 0x1540 <Dio_u8ReadPin+0xb8>
    1548:	ca 01       	movw	r24, r20
    154a:	81 70       	andi	r24, 0x01	; 1
    154c:	90 70       	andi	r25, 0x00	; 0
    154e:	00 97       	sbiw	r24, 0x00	; 0
    1550:	09 f0       	breq	.+2      	; 0x1554 <Dio_u8ReadPin+0xcc>
    1552:	f1 c0       	rjmp	.+482    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		{
			/*The required PIN is input*/
			Result = Get_Bit(PINA, Pin);
    1554:	e9 e3       	ldi	r30, 0x39	; 57
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	28 2f       	mov	r18, r24
    155c:	30 e0       	ldi	r19, 0x00	; 0
    155e:	8b 81       	ldd	r24, Y+3	; 0x03
    1560:	88 2f       	mov	r24, r24
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	a9 01       	movw	r20, r18
    1566:	02 c0       	rjmp	.+4      	; 0x156c <Dio_u8ReadPin+0xe4>
    1568:	55 95       	asr	r21
    156a:	47 95       	ror	r20
    156c:	8a 95       	dec	r24
    156e:	e2 f7       	brpl	.-8      	; 0x1568 <Dio_u8ReadPin+0xe0>
    1570:	ca 01       	movw	r24, r20
    1572:	81 70       	andi	r24, 0x01	; 1
    1574:	89 83       	std	Y+1, r24	; 0x01
    1576:	df c0       	rjmp	.+446    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		}
		break;
	case Dio_PORTB:
		if(Get_Bit(DDRB, Pin) == 1)
    1578:	e7 e3       	ldi	r30, 0x37	; 55
    157a:	f0 e0       	ldi	r31, 0x00	; 0
    157c:	80 81       	ld	r24, Z
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	8b 81       	ldd	r24, Y+3	; 0x03
    1584:	88 2f       	mov	r24, r24
    1586:	90 e0       	ldi	r25, 0x00	; 0
    1588:	a9 01       	movw	r20, r18
    158a:	02 c0       	rjmp	.+4      	; 0x1590 <Dio_u8ReadPin+0x108>
    158c:	55 95       	asr	r21
    158e:	47 95       	ror	r20
    1590:	8a 95       	dec	r24
    1592:	e2 f7       	brpl	.-8      	; 0x158c <Dio_u8ReadPin+0x104>
    1594:	ca 01       	movw	r24, r20
    1596:	81 70       	andi	r24, 0x01	; 1
    1598:	90 70       	andi	r25, 0x00	; 0
    159a:	88 23       	and	r24, r24
    159c:	91 f0       	breq	.+36     	; 0x15c2 <Dio_u8ReadPin+0x13a>
		{
			/*The required PIN is output*/
			Result = Get_Bit(PORTB, Pin);
    159e:	e8 e3       	ldi	r30, 0x38	; 56
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	80 81       	ld	r24, Z
    15a4:	28 2f       	mov	r18, r24
    15a6:	30 e0       	ldi	r19, 0x00	; 0
    15a8:	8b 81       	ldd	r24, Y+3	; 0x03
    15aa:	88 2f       	mov	r24, r24
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	a9 01       	movw	r20, r18
    15b0:	02 c0       	rjmp	.+4      	; 0x15b6 <Dio_u8ReadPin+0x12e>
    15b2:	55 95       	asr	r21
    15b4:	47 95       	ror	r20
    15b6:	8a 95       	dec	r24
    15b8:	e2 f7       	brpl	.-8      	; 0x15b2 <Dio_u8ReadPin+0x12a>
    15ba:	ca 01       	movw	r24, r20
    15bc:	81 70       	andi	r24, 0x01	; 1
    15be:	89 83       	std	Y+1, r24	; 0x01
    15c0:	ba c0       	rjmp	.+372    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		}
		else if(Get_Bit(DDRB, Pin) == 0)
    15c2:	e7 e3       	ldi	r30, 0x37	; 55
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	28 2f       	mov	r18, r24
    15ca:	30 e0       	ldi	r19, 0x00	; 0
    15cc:	8b 81       	ldd	r24, Y+3	; 0x03
    15ce:	88 2f       	mov	r24, r24
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	a9 01       	movw	r20, r18
    15d4:	02 c0       	rjmp	.+4      	; 0x15da <Dio_u8ReadPin+0x152>
    15d6:	55 95       	asr	r21
    15d8:	47 95       	ror	r20
    15da:	8a 95       	dec	r24
    15dc:	e2 f7       	brpl	.-8      	; 0x15d6 <Dio_u8ReadPin+0x14e>
    15de:	ca 01       	movw	r24, r20
    15e0:	81 70       	andi	r24, 0x01	; 1
    15e2:	90 70       	andi	r25, 0x00	; 0
    15e4:	00 97       	sbiw	r24, 0x00	; 0
    15e6:	09 f0       	breq	.+2      	; 0x15ea <Dio_u8ReadPin+0x162>
    15e8:	a6 c0       	rjmp	.+332    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		{
			/*The required PIN is input*/
			Result = Get_Bit(PINB, Pin);
    15ea:	e6 e3       	ldi	r30, 0x36	; 54
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	28 2f       	mov	r18, r24
    15f2:	30 e0       	ldi	r19, 0x00	; 0
    15f4:	8b 81       	ldd	r24, Y+3	; 0x03
    15f6:	88 2f       	mov	r24, r24
    15f8:	90 e0       	ldi	r25, 0x00	; 0
    15fa:	a9 01       	movw	r20, r18
    15fc:	02 c0       	rjmp	.+4      	; 0x1602 <Dio_u8ReadPin+0x17a>
    15fe:	55 95       	asr	r21
    1600:	47 95       	ror	r20
    1602:	8a 95       	dec	r24
    1604:	e2 f7       	brpl	.-8      	; 0x15fe <Dio_u8ReadPin+0x176>
    1606:	ca 01       	movw	r24, r20
    1608:	81 70       	andi	r24, 0x01	; 1
    160a:	89 83       	std	Y+1, r24	; 0x01
    160c:	94 c0       	rjmp	.+296    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		}
		break;
	case Dio_PORTC:
		if(Get_Bit(DDRC, Pin) == 1)
    160e:	e4 e3       	ldi	r30, 0x34	; 52
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	28 2f       	mov	r18, r24
    1616:	30 e0       	ldi	r19, 0x00	; 0
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	88 2f       	mov	r24, r24
    161c:	90 e0       	ldi	r25, 0x00	; 0
    161e:	a9 01       	movw	r20, r18
    1620:	02 c0       	rjmp	.+4      	; 0x1626 <Dio_u8ReadPin+0x19e>
    1622:	55 95       	asr	r21
    1624:	47 95       	ror	r20
    1626:	8a 95       	dec	r24
    1628:	e2 f7       	brpl	.-8      	; 0x1622 <Dio_u8ReadPin+0x19a>
    162a:	ca 01       	movw	r24, r20
    162c:	81 70       	andi	r24, 0x01	; 1
    162e:	90 70       	andi	r25, 0x00	; 0
    1630:	88 23       	and	r24, r24
    1632:	91 f0       	breq	.+36     	; 0x1658 <Dio_u8ReadPin+0x1d0>
		{
			/*The required PIN is output*/
			Result = Get_Bit(PORTC, Pin);
    1634:	e5 e3       	ldi	r30, 0x35	; 53
    1636:	f0 e0       	ldi	r31, 0x00	; 0
    1638:	80 81       	ld	r24, Z
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	8b 81       	ldd	r24, Y+3	; 0x03
    1640:	88 2f       	mov	r24, r24
    1642:	90 e0       	ldi	r25, 0x00	; 0
    1644:	a9 01       	movw	r20, r18
    1646:	02 c0       	rjmp	.+4      	; 0x164c <Dio_u8ReadPin+0x1c4>
    1648:	55 95       	asr	r21
    164a:	47 95       	ror	r20
    164c:	8a 95       	dec	r24
    164e:	e2 f7       	brpl	.-8      	; 0x1648 <Dio_u8ReadPin+0x1c0>
    1650:	ca 01       	movw	r24, r20
    1652:	81 70       	andi	r24, 0x01	; 1
    1654:	89 83       	std	Y+1, r24	; 0x01
    1656:	6f c0       	rjmp	.+222    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		}
		else if(Get_Bit(DDRC, Pin) == 0)
    1658:	e4 e3       	ldi	r30, 0x34	; 52
    165a:	f0 e0       	ldi	r31, 0x00	; 0
    165c:	80 81       	ld	r24, Z
    165e:	28 2f       	mov	r18, r24
    1660:	30 e0       	ldi	r19, 0x00	; 0
    1662:	8b 81       	ldd	r24, Y+3	; 0x03
    1664:	88 2f       	mov	r24, r24
    1666:	90 e0       	ldi	r25, 0x00	; 0
    1668:	a9 01       	movw	r20, r18
    166a:	02 c0       	rjmp	.+4      	; 0x1670 <Dio_u8ReadPin+0x1e8>
    166c:	55 95       	asr	r21
    166e:	47 95       	ror	r20
    1670:	8a 95       	dec	r24
    1672:	e2 f7       	brpl	.-8      	; 0x166c <Dio_u8ReadPin+0x1e4>
    1674:	ca 01       	movw	r24, r20
    1676:	81 70       	andi	r24, 0x01	; 1
    1678:	90 70       	andi	r25, 0x00	; 0
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	09 f0       	breq	.+2      	; 0x1680 <Dio_u8ReadPin+0x1f8>
    167e:	5b c0       	rjmp	.+182    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		{
			/*The required PIN is input*/
			Result = Get_Bit(PINC, Pin);
    1680:	e3 e3       	ldi	r30, 0x33	; 51
    1682:	f0 e0       	ldi	r31, 0x00	; 0
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	88 2f       	mov	r24, r24
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	a9 01       	movw	r20, r18
    1692:	02 c0       	rjmp	.+4      	; 0x1698 <Dio_u8ReadPin+0x210>
    1694:	55 95       	asr	r21
    1696:	47 95       	ror	r20
    1698:	8a 95       	dec	r24
    169a:	e2 f7       	brpl	.-8      	; 0x1694 <Dio_u8ReadPin+0x20c>
    169c:	ca 01       	movw	r24, r20
    169e:	81 70       	andi	r24, 0x01	; 1
    16a0:	89 83       	std	Y+1, r24	; 0x01
    16a2:	49 c0       	rjmp	.+146    	; 0x1736 <Dio_u8ReadPin+0x2ae>
		}
		break;
	case Dio_PORTD:
		if(Get_Bit(DDRD, Pin) == 1)
    16a4:	e1 e3       	ldi	r30, 0x31	; 49
    16a6:	f0 e0       	ldi	r31, 0x00	; 0
    16a8:	80 81       	ld	r24, Z
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	8b 81       	ldd	r24, Y+3	; 0x03
    16b0:	88 2f       	mov	r24, r24
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	a9 01       	movw	r20, r18
    16b6:	02 c0       	rjmp	.+4      	; 0x16bc <Dio_u8ReadPin+0x234>
    16b8:	55 95       	asr	r21
    16ba:	47 95       	ror	r20
    16bc:	8a 95       	dec	r24
    16be:	e2 f7       	brpl	.-8      	; 0x16b8 <Dio_u8ReadPin+0x230>
    16c0:	ca 01       	movw	r24, r20
    16c2:	81 70       	andi	r24, 0x01	; 1
    16c4:	90 70       	andi	r25, 0x00	; 0
    16c6:	88 23       	and	r24, r24
    16c8:	91 f0       	breq	.+36     	; 0x16ee <Dio_u8ReadPin+0x266>
		{
			/*The required PIN is output*/
			Result = Get_Bit(PORTD, Pin);
    16ca:	e2 e3       	ldi	r30, 0x32	; 50
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	28 2f       	mov	r18, r24
    16d2:	30 e0       	ldi	r19, 0x00	; 0
    16d4:	8b 81       	ldd	r24, Y+3	; 0x03
    16d6:	88 2f       	mov	r24, r24
    16d8:	90 e0       	ldi	r25, 0x00	; 0
    16da:	a9 01       	movw	r20, r18
    16dc:	02 c0       	rjmp	.+4      	; 0x16e2 <Dio_u8ReadPin+0x25a>
    16de:	55 95       	asr	r21
    16e0:	47 95       	ror	r20
    16e2:	8a 95       	dec	r24
    16e4:	e2 f7       	brpl	.-8      	; 0x16de <Dio_u8ReadPin+0x256>
    16e6:	ca 01       	movw	r24, r20
    16e8:	81 70       	andi	r24, 0x01	; 1
    16ea:	89 83       	std	Y+1, r24	; 0x01
    16ec:	24 c0       	rjmp	.+72     	; 0x1736 <Dio_u8ReadPin+0x2ae>
		}
		else if(Get_Bit(DDRD, Pin) == 0)
    16ee:	e1 e3       	ldi	r30, 0x31	; 49
    16f0:	f0 e0       	ldi	r31, 0x00	; 0
    16f2:	80 81       	ld	r24, Z
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	88 2f       	mov	r24, r24
    16fc:	90 e0       	ldi	r25, 0x00	; 0
    16fe:	a9 01       	movw	r20, r18
    1700:	02 c0       	rjmp	.+4      	; 0x1706 <Dio_u8ReadPin+0x27e>
    1702:	55 95       	asr	r21
    1704:	47 95       	ror	r20
    1706:	8a 95       	dec	r24
    1708:	e2 f7       	brpl	.-8      	; 0x1702 <Dio_u8ReadPin+0x27a>
    170a:	ca 01       	movw	r24, r20
    170c:	81 70       	andi	r24, 0x01	; 1
    170e:	90 70       	andi	r25, 0x00	; 0
    1710:	00 97       	sbiw	r24, 0x00	; 0
    1712:	89 f4       	brne	.+34     	; 0x1736 <Dio_u8ReadPin+0x2ae>
		{
			/*The required PIN is input*/
			Result = Get_Bit(PIND, Pin);
    1714:	e0 e3       	ldi	r30, 0x30	; 48
    1716:	f0 e0       	ldi	r31, 0x00	; 0
    1718:	80 81       	ld	r24, Z
    171a:	28 2f       	mov	r18, r24
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	8b 81       	ldd	r24, Y+3	; 0x03
    1720:	88 2f       	mov	r24, r24
    1722:	90 e0       	ldi	r25, 0x00	; 0
    1724:	a9 01       	movw	r20, r18
    1726:	02 c0       	rjmp	.+4      	; 0x172c <Dio_u8ReadPin+0x2a4>
    1728:	55 95       	asr	r21
    172a:	47 95       	ror	r20
    172c:	8a 95       	dec	r24
    172e:	e2 f7       	brpl	.-8      	; 0x1728 <Dio_u8ReadPin+0x2a0>
    1730:	ca 01       	movw	r24, r20
    1732:	81 70       	andi	r24, 0x01	; 1
    1734:	89 83       	std	Y+1, r24	; 0x01
		}
		break;
	}

	return Result;
    1736:	89 81       	ldd	r24, Y+1	; 0x01
}
    1738:	0f 90       	pop	r0
    173a:	0f 90       	pop	r0
    173c:	0f 90       	pop	r0
    173e:	0f 90       	pop	r0
    1740:	0f 90       	pop	r0
    1742:	cf 91       	pop	r28
    1744:	df 91       	pop	r29
    1746:	08 95       	ret

00001748 <Dio_u8ReadPort>:

uint8_t Dio_u8ReadPort(enuPortType Port, uint8_t Control)
{
    1748:	df 93       	push	r29
    174a:	cf 93       	push	r28
    174c:	00 d0       	rcall	.+0      	; 0x174e <Dio_u8ReadPort+0x6>
    174e:	00 d0       	rcall	.+0      	; 0x1750 <Dio_u8ReadPort+0x8>
    1750:	0f 92       	push	r0
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	8a 83       	std	Y+2, r24	; 0x02
    1758:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t  Result=0;
    175a:	19 82       	std	Y+1, r1	; 0x01

	switch(Port)
    175c:	8a 81       	ldd	r24, Y+2	; 0x02
    175e:	28 2f       	mov	r18, r24
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	3d 83       	std	Y+5, r19	; 0x05
    1764:	2c 83       	std	Y+4, r18	; 0x04
    1766:	8c 81       	ldd	r24, Y+4	; 0x04
    1768:	9d 81       	ldd	r25, Y+5	; 0x05
    176a:	81 30       	cpi	r24, 0x01	; 1
    176c:	91 05       	cpc	r25, r1
    176e:	29 f1       	breq	.+74     	; 0x17ba <Dio_u8ReadPort+0x72>
    1770:	2c 81       	ldd	r18, Y+4	; 0x04
    1772:	3d 81       	ldd	r19, Y+5	; 0x05
    1774:	22 30       	cpi	r18, 0x02	; 2
    1776:	31 05       	cpc	r19, r1
    1778:	2c f4       	brge	.+10     	; 0x1784 <Dio_u8ReadPort+0x3c>
    177a:	8c 81       	ldd	r24, Y+4	; 0x04
    177c:	9d 81       	ldd	r25, Y+5	; 0x05
    177e:	00 97       	sbiw	r24, 0x00	; 0
    1780:	61 f0       	breq	.+24     	; 0x179a <Dio_u8ReadPort+0x52>
    1782:	4a c0       	rjmp	.+148    	; 0x1818 <Dio_u8ReadPort+0xd0>
    1784:	2c 81       	ldd	r18, Y+4	; 0x04
    1786:	3d 81       	ldd	r19, Y+5	; 0x05
    1788:	22 30       	cpi	r18, 0x02	; 2
    178a:	31 05       	cpc	r19, r1
    178c:	31 f1       	breq	.+76     	; 0x17da <Dio_u8ReadPort+0x92>
    178e:	8c 81       	ldd	r24, Y+4	; 0x04
    1790:	9d 81       	ldd	r25, Y+5	; 0x05
    1792:	83 30       	cpi	r24, 0x03	; 3
    1794:	91 05       	cpc	r25, r1
    1796:	89 f1       	breq	.+98     	; 0x17fa <Dio_u8ReadPort+0xb2>
    1798:	3f c0       	rjmp	.+126    	; 0x1818 <Dio_u8ReadPort+0xd0>
	{
	case Dio_PORTA:
		if(Control == 0)
    179a:	8b 81       	ldd	r24, Y+3	; 0x03
    179c:	88 23       	and	r24, r24
    179e:	29 f4       	brne	.+10     	; 0x17aa <Dio_u8ReadPort+0x62>
		{
			Result = PINA;
    17a0:	e9 e3       	ldi	r30, 0x39	; 57
    17a2:	f0 e0       	ldi	r31, 0x00	; 0
    17a4:	80 81       	ld	r24, Z
    17a6:	89 83       	std	Y+1, r24	; 0x01
    17a8:	37 c0       	rjmp	.+110    	; 0x1818 <Dio_u8ReadPort+0xd0>
		}
		else if(Control == 1)
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	81 30       	cpi	r24, 0x01	; 1
    17ae:	a1 f5       	brne	.+104    	; 0x1818 <Dio_u8ReadPort+0xd0>
		{
			Result = PORTA;
    17b0:	eb e3       	ldi	r30, 0x3B	; 59
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	89 83       	std	Y+1, r24	; 0x01
    17b8:	2f c0       	rjmp	.+94     	; 0x1818 <Dio_u8ReadPort+0xd0>
		}
		break;
	case Dio_PORTB:
		if(Control == 0)
    17ba:	8b 81       	ldd	r24, Y+3	; 0x03
    17bc:	88 23       	and	r24, r24
    17be:	29 f4       	brne	.+10     	; 0x17ca <Dio_u8ReadPort+0x82>
		{
			Result = PINB;
    17c0:	e6 e3       	ldi	r30, 0x36	; 54
    17c2:	f0 e0       	ldi	r31, 0x00	; 0
    17c4:	80 81       	ld	r24, Z
    17c6:	89 83       	std	Y+1, r24	; 0x01
    17c8:	27 c0       	rjmp	.+78     	; 0x1818 <Dio_u8ReadPort+0xd0>
		}
		else if(Control == 1)
    17ca:	8b 81       	ldd	r24, Y+3	; 0x03
    17cc:	81 30       	cpi	r24, 0x01	; 1
    17ce:	21 f5       	brne	.+72     	; 0x1818 <Dio_u8ReadPort+0xd0>
		{
			Result = PORTB;
    17d0:	e8 e3       	ldi	r30, 0x38	; 56
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	89 83       	std	Y+1, r24	; 0x01
    17d8:	1f c0       	rjmp	.+62     	; 0x1818 <Dio_u8ReadPort+0xd0>
		}
		break;

	case Dio_PORTC:
		if(Control == 0)
    17da:	8b 81       	ldd	r24, Y+3	; 0x03
    17dc:	88 23       	and	r24, r24
    17de:	29 f4       	brne	.+10     	; 0x17ea <Dio_u8ReadPort+0xa2>
		{
			Result = PINC;
    17e0:	e3 e3       	ldi	r30, 0x33	; 51
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	89 83       	std	Y+1, r24	; 0x01
    17e8:	17 c0       	rjmp	.+46     	; 0x1818 <Dio_u8ReadPort+0xd0>
		}
		else if(Control == 1)
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	81 30       	cpi	r24, 0x01	; 1
    17ee:	a1 f4       	brne	.+40     	; 0x1818 <Dio_u8ReadPort+0xd0>
		{
			Result = PORTC;
    17f0:	e5 e3       	ldi	r30, 0x35	; 53
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	0f c0       	rjmp	.+30     	; 0x1818 <Dio_u8ReadPort+0xd0>
		}
		break;

	case Dio_PORTD:
		if(Control == 0)
    17fa:	8b 81       	ldd	r24, Y+3	; 0x03
    17fc:	88 23       	and	r24, r24
    17fe:	29 f4       	brne	.+10     	; 0x180a <Dio_u8ReadPort+0xc2>
		{
			Result = PIND;
    1800:	e0 e3       	ldi	r30, 0x30	; 48
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	80 81       	ld	r24, Z
    1806:	89 83       	std	Y+1, r24	; 0x01
    1808:	07 c0       	rjmp	.+14     	; 0x1818 <Dio_u8ReadPort+0xd0>
		}
		else if(Control == 1)
    180a:	8b 81       	ldd	r24, Y+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	21 f4       	brne	.+8      	; 0x1818 <Dio_u8ReadPort+0xd0>
		{
			Result = PORTD;
    1810:	e2 e3       	ldi	r30, 0x32	; 50
    1812:	f0 e0       	ldi	r31, 0x00	; 0
    1814:	80 81       	ld	r24, Z
    1816:	89 83       	std	Y+1, r24	; 0x01
		}
		break;

	}
	return Result;
    1818:	89 81       	ldd	r24, Y+1	; 0x01
}
    181a:	0f 90       	pop	r0
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <Dio_vidTogglePin>:

void Dio_vidTogglePin(enuPortType Port, uint8_t Pin)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <Dio_vidTogglePin+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <Dio_vidTogglePin+0x8>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	6a 83       	std	Y+2, r22	; 0x02
	switch(Port)
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	28 2f       	mov	r18, r24
    183e:	30 e0       	ldi	r19, 0x00	; 0
    1840:	3c 83       	std	Y+4, r19	; 0x04
    1842:	2b 83       	std	Y+3, r18	; 0x03
    1844:	4b 81       	ldd	r20, Y+3	; 0x03
    1846:	5c 81       	ldd	r21, Y+4	; 0x04
    1848:	41 30       	cpi	r20, 0x01	; 1
    184a:	51 05       	cpc	r21, r1
    184c:	09 f4       	brne	.+2      	; 0x1850 <Dio_vidTogglePin+0x26>
    184e:	40 c0       	rjmp	.+128    	; 0x18d0 <Dio_vidTogglePin+0xa6>
    1850:	8b 81       	ldd	r24, Y+3	; 0x03
    1852:	9c 81       	ldd	r25, Y+4	; 0x04
    1854:	82 30       	cpi	r24, 0x02	; 2
    1856:	91 05       	cpc	r25, r1
    1858:	34 f4       	brge	.+12     	; 0x1866 <Dio_vidTogglePin+0x3c>
    185a:	2b 81       	ldd	r18, Y+3	; 0x03
    185c:	3c 81       	ldd	r19, Y+4	; 0x04
    185e:	21 15       	cp	r18, r1
    1860:	31 05       	cpc	r19, r1
    1862:	71 f0       	breq	.+28     	; 0x1880 <Dio_vidTogglePin+0x56>
    1864:	aa c0       	rjmp	.+340    	; 0x19ba <Dio_vidTogglePin+0x190>
    1866:	4b 81       	ldd	r20, Y+3	; 0x03
    1868:	5c 81       	ldd	r21, Y+4	; 0x04
    186a:	42 30       	cpi	r20, 0x02	; 2
    186c:	51 05       	cpc	r21, r1
    186e:	09 f4       	brne	.+2      	; 0x1872 <Dio_vidTogglePin+0x48>
    1870:	57 c0       	rjmp	.+174    	; 0x1920 <Dio_vidTogglePin+0xf6>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	91 05       	cpc	r25, r1
    187a:	09 f4       	brne	.+2      	; 0x187e <Dio_vidTogglePin+0x54>
    187c:	78 c0       	rjmp	.+240    	; 0x196e <Dio_vidTogglePin+0x144>
    187e:	9d c0       	rjmp	.+314    	; 0x19ba <Dio_vidTogglePin+0x190>
	{
	case Dio_PORTA:
		if(Get_Bit(DDRA, Pin) == 1)
    1880:	ea e3       	ldi	r30, 0x3A	; 58
    1882:	f0 e0       	ldi	r31, 0x00	; 0
    1884:	80 81       	ld	r24, Z
    1886:	28 2f       	mov	r18, r24
    1888:	30 e0       	ldi	r19, 0x00	; 0
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	88 2f       	mov	r24, r24
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	a9 01       	movw	r20, r18
    1892:	02 c0       	rjmp	.+4      	; 0x1898 <Dio_vidTogglePin+0x6e>
    1894:	55 95       	asr	r21
    1896:	47 95       	ror	r20
    1898:	8a 95       	dec	r24
    189a:	e2 f7       	brpl	.-8      	; 0x1894 <Dio_vidTogglePin+0x6a>
    189c:	ca 01       	movw	r24, r20
    189e:	81 70       	andi	r24, 0x01	; 1
    18a0:	90 70       	andi	r25, 0x00	; 0
    18a2:	88 23       	and	r24, r24
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <Dio_vidTogglePin+0x7e>
    18a6:	89 c0       	rjmp	.+274    	; 0x19ba <Dio_vidTogglePin+0x190>
		{
			Toggle_Bit(PORTA, Pin);
    18a8:	ab e3       	ldi	r26, 0x3B	; 59
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	eb e3       	ldi	r30, 0x3B	; 59
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <Dio_vidTogglePin+0x9c>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <Dio_vidTogglePin+0x98>
    18ca:	84 27       	eor	r24, r20
    18cc:	8c 93       	st	X, r24
    18ce:	75 c0       	rjmp	.+234    	; 0x19ba <Dio_vidTogglePin+0x190>
		{
			/*Fire an error or do nothing*/
		}
		break;
	case Dio_PORTB:
		if(Get_Bit(DDRB, Pin) == 1)
    18d0:	e7 e3       	ldi	r30, 0x37	; 55
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	80 81       	ld	r24, Z
    18d6:	28 2f       	mov	r18, r24
    18d8:	30 e0       	ldi	r19, 0x00	; 0
    18da:	8a 81       	ldd	r24, Y+2	; 0x02
    18dc:	88 2f       	mov	r24, r24
    18de:	90 e0       	ldi	r25, 0x00	; 0
    18e0:	a9 01       	movw	r20, r18
    18e2:	02 c0       	rjmp	.+4      	; 0x18e8 <Dio_vidTogglePin+0xbe>
    18e4:	55 95       	asr	r21
    18e6:	47 95       	ror	r20
    18e8:	8a 95       	dec	r24
    18ea:	e2 f7       	brpl	.-8      	; 0x18e4 <Dio_vidTogglePin+0xba>
    18ec:	ca 01       	movw	r24, r20
    18ee:	81 70       	andi	r24, 0x01	; 1
    18f0:	90 70       	andi	r25, 0x00	; 0
    18f2:	88 23       	and	r24, r24
    18f4:	09 f4       	brne	.+2      	; 0x18f8 <Dio_vidTogglePin+0xce>
    18f6:	61 c0       	rjmp	.+194    	; 0x19ba <Dio_vidTogglePin+0x190>
		{
			Toggle_Bit(PORTB, Pin);
    18f8:	a8 e3       	ldi	r26, 0x38	; 56
    18fa:	b0 e0       	ldi	r27, 0x00	; 0
    18fc:	e8 e3       	ldi	r30, 0x38	; 56
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	80 81       	ld	r24, Z
    1902:	48 2f       	mov	r20, r24
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	81 e0       	ldi	r24, 0x01	; 1
    190c:	90 e0       	ldi	r25, 0x00	; 0
    190e:	02 2e       	mov	r0, r18
    1910:	02 c0       	rjmp	.+4      	; 0x1916 <Dio_vidTogglePin+0xec>
    1912:	88 0f       	add	r24, r24
    1914:	99 1f       	adc	r25, r25
    1916:	0a 94       	dec	r0
    1918:	e2 f7       	brpl	.-8      	; 0x1912 <Dio_vidTogglePin+0xe8>
    191a:	84 27       	eor	r24, r20
    191c:	8c 93       	st	X, r24
    191e:	4d c0       	rjmp	.+154    	; 0x19ba <Dio_vidTogglePin+0x190>
		{
			/*Fire an error or do nothing*/
		}
		break;
	case Dio_PORTC:
			if(Get_Bit(DDRB, Pin) == 1)
    1920:	e7 e3       	ldi	r30, 0x37	; 55
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	28 2f       	mov	r18, r24
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	8a 81       	ldd	r24, Y+2	; 0x02
    192c:	88 2f       	mov	r24, r24
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	a9 01       	movw	r20, r18
    1932:	02 c0       	rjmp	.+4      	; 0x1938 <Dio_vidTogglePin+0x10e>
    1934:	55 95       	asr	r21
    1936:	47 95       	ror	r20
    1938:	8a 95       	dec	r24
    193a:	e2 f7       	brpl	.-8      	; 0x1934 <Dio_vidTogglePin+0x10a>
    193c:	ca 01       	movw	r24, r20
    193e:	81 70       	andi	r24, 0x01	; 1
    1940:	90 70       	andi	r25, 0x00	; 0
    1942:	88 23       	and	r24, r24
    1944:	d1 f1       	breq	.+116    	; 0x19ba <Dio_vidTogglePin+0x190>
			{
				Toggle_Bit(PORTB, Pin);
    1946:	a8 e3       	ldi	r26, 0x38	; 56
    1948:	b0 e0       	ldi	r27, 0x00	; 0
    194a:	e8 e3       	ldi	r30, 0x38	; 56
    194c:	f0 e0       	ldi	r31, 0x00	; 0
    194e:	80 81       	ld	r24, Z
    1950:	48 2f       	mov	r20, r24
    1952:	8a 81       	ldd	r24, Y+2	; 0x02
    1954:	28 2f       	mov	r18, r24
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	81 e0       	ldi	r24, 0x01	; 1
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	02 2e       	mov	r0, r18
    195e:	02 c0       	rjmp	.+4      	; 0x1964 <Dio_vidTogglePin+0x13a>
    1960:	88 0f       	add	r24, r24
    1962:	99 1f       	adc	r25, r25
    1964:	0a 94       	dec	r0
    1966:	e2 f7       	brpl	.-8      	; 0x1960 <Dio_vidTogglePin+0x136>
    1968:	84 27       	eor	r24, r20
    196a:	8c 93       	st	X, r24
    196c:	26 c0       	rjmp	.+76     	; 0x19ba <Dio_vidTogglePin+0x190>
			{
				/*Fire an error or do nothing*/
			}
			break;
	case Dio_PORTD:
			if(Get_Bit(DDRB, Pin) == 1)
    196e:	e7 e3       	ldi	r30, 0x37	; 55
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	8a 81       	ldd	r24, Y+2	; 0x02
    197a:	88 2f       	mov	r24, r24
    197c:	90 e0       	ldi	r25, 0x00	; 0
    197e:	a9 01       	movw	r20, r18
    1980:	02 c0       	rjmp	.+4      	; 0x1986 <Dio_vidTogglePin+0x15c>
    1982:	55 95       	asr	r21
    1984:	47 95       	ror	r20
    1986:	8a 95       	dec	r24
    1988:	e2 f7       	brpl	.-8      	; 0x1982 <Dio_vidTogglePin+0x158>
    198a:	ca 01       	movw	r24, r20
    198c:	81 70       	andi	r24, 0x01	; 1
    198e:	90 70       	andi	r25, 0x00	; 0
    1990:	88 23       	and	r24, r24
    1992:	99 f0       	breq	.+38     	; 0x19ba <Dio_vidTogglePin+0x190>
			{
				Toggle_Bit(PORTB, Pin);
    1994:	a8 e3       	ldi	r26, 0x38	; 56
    1996:	b0 e0       	ldi	r27, 0x00	; 0
    1998:	e8 e3       	ldi	r30, 0x38	; 56
    199a:	f0 e0       	ldi	r31, 0x00	; 0
    199c:	80 81       	ld	r24, Z
    199e:	48 2f       	mov	r20, r24
    19a0:	8a 81       	ldd	r24, Y+2	; 0x02
    19a2:	28 2f       	mov	r18, r24
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	81 e0       	ldi	r24, 0x01	; 1
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	02 2e       	mov	r0, r18
    19ac:	02 c0       	rjmp	.+4      	; 0x19b2 <Dio_vidTogglePin+0x188>
    19ae:	88 0f       	add	r24, r24
    19b0:	99 1f       	adc	r25, r25
    19b2:	0a 94       	dec	r0
    19b4:	e2 f7       	brpl	.-8      	; 0x19ae <Dio_vidTogglePin+0x184>
    19b6:	84 27       	eor	r24, r20
    19b8:	8c 93       	st	X, r24
			}
			break;


	}
}
    19ba:	0f 90       	pop	r0
    19bc:	0f 90       	pop	r0
    19be:	0f 90       	pop	r0
    19c0:	0f 90       	pop	r0
    19c2:	cf 91       	pop	r28
    19c4:	df 91       	pop	r29
    19c6:	08 95       	ret

000019c8 <ADC_vidInit>:
 * Input      : None
 * Output     : None
 * Last_Author: ALMALKY
 **************************************************************/
void ADC_vidInit(void)
{
    19c8:	df 93       	push	r29
    19ca:	cf 93       	push	r28
    19cc:	cd b7       	in	r28, 0x3d	; 61
    19ce:	de b7       	in	r29, 0x3e	; 62
	/*Configure Prescalar (Division Factor = 1024)*/
	ADCSRA = (ADCSRA & 0xF8) | 0x07;
    19d0:	a6 e2       	ldi	r26, 0x26	; 38
    19d2:	b0 e0       	ldi	r27, 0x00	; 0
    19d4:	e6 e2       	ldi	r30, 0x26	; 38
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	80 81       	ld	r24, Z
    19da:	87 60       	ori	r24, 0x07	; 7
    19dc:	8c 93       	st	X, r24

	/*Configure Vref (Internal Vref = VCC)*/
	ADMUX = (ADMUX &0x3F) | 0x40;
    19de:	a7 e2       	ldi	r26, 0x27	; 39
    19e0:	b0 e0       	ldi	r27, 0x00	; 0
    19e2:	e7 e2       	ldi	r30, 0x27	; 39
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	8f 73       	andi	r24, 0x3F	; 63
    19ea:	80 64       	ori	r24, 0x40	; 64
    19ec:	8c 93       	st	X, r24

	/*Configure Right ADjusted Result, No Interrupt, No Auto-Trigger*/
	Clear_Bit(ADMUX, 5);
    19ee:	a7 e2       	ldi	r26, 0x27	; 39
    19f0:	b0 e0       	ldi	r27, 0x00	; 0
    19f2:	e7 e2       	ldi	r30, 0x27	; 39
    19f4:	f0 e0       	ldi	r31, 0x00	; 0
    19f6:	80 81       	ld	r24, Z
    19f8:	8f 7d       	andi	r24, 0xDF	; 223
    19fa:	8c 93       	st	X, r24
	Clear_Bit(ADCSRA, 3);
    19fc:	a6 e2       	ldi	r26, 0x26	; 38
    19fe:	b0 e0       	ldi	r27, 0x00	; 0
    1a00:	e6 e2       	ldi	r30, 0x26	; 38
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	80 81       	ld	r24, Z
    1a06:	87 7f       	andi	r24, 0xF7	; 247
    1a08:	8c 93       	st	X, r24
	Clear_Bit(ADCSRA, 5);
    1a0a:	a6 e2       	ldi	r26, 0x26	; 38
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e6 e2       	ldi	r30, 0x26	; 38
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	8f 7d       	andi	r24, 0xDF	; 223
    1a16:	8c 93       	st	X, r24

	/*Enable ADC module*/
	Set_Bit(ADCSRA, 7);
    1a18:	a6 e2       	ldi	r26, 0x26	; 38
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e6 e2       	ldi	r30, 0x26	; 38
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 68       	ori	r24, 0x80	; 128
    1a24:	8c 93       	st	X, r24
}
    1a26:	cf 91       	pop	r28
    1a28:	df 91       	pop	r29
    1a2a:	08 95       	ret

00001a2c <ADC_u16ReadChannel>:
 * Input      : Channel Number
 * Output     : Conversion Result
 * Last_Author: ALMALKY
 **************************************************************/
uint16_t ADC_u16ReadChannel(uint8_t Channel)
{
    1a2c:	df 93       	push	r29
    1a2e:	cf 93       	push	r28
    1a30:	00 d0       	rcall	.+0      	; 0x1a32 <ADC_u16ReadChannel+0x6>
    1a32:	0f 92       	push	r0
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	8b 83       	std	Y+3, r24	; 0x03
	uint16_t Result = 0;
    1a3a:	1a 82       	std	Y+2, r1	; 0x02
    1a3c:	19 82       	std	Y+1, r1	; 0x01

	/*Check if the ADC is currently running a conversion*/
	if (Get_Bit(ADCSRA, 6) == 0)
    1a3e:	e6 e2       	ldi	r30, 0x26	; 38
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	82 95       	swap	r24
    1a46:	86 95       	lsr	r24
    1a48:	86 95       	lsr	r24
    1a4a:	83 70       	andi	r24, 0x03	; 3
    1a4c:	88 2f       	mov	r24, r24
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	81 70       	andi	r24, 0x01	; 1
    1a52:	90 70       	andi	r25, 0x00	; 0
    1a54:	00 97       	sbiw	r24, 0x00	; 0
    1a56:	d1 f5       	brne	.+116    	; 0x1acc <ADC_u16ReadChannel+0xa0>
	{
		if (Channel >=1 && Channel <= 8)
    1a58:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5a:	88 23       	and	r24, r24
    1a5c:	b9 f1       	breq	.+110    	; 0x1acc <ADC_u16ReadChannel+0xa0>
    1a5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1a60:	89 30       	cpi	r24, 0x09	; 9
    1a62:	a0 f5       	brcc	.+104    	; 0x1acc <ADC_u16ReadChannel+0xa0>
		{
			/*Select the required channel*/
			ADMUX = (ADMUX & 0xE0) | (Channel - 1);
    1a64:	a7 e2       	ldi	r26, 0x27	; 39
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e7 e2       	ldi	r30, 0x27	; 39
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	98 2f       	mov	r25, r24
    1a70:	90 7e       	andi	r25, 0xE0	; 224
    1a72:	8b 81       	ldd	r24, Y+3	; 0x03
    1a74:	81 50       	subi	r24, 0x01	; 1
    1a76:	89 2b       	or	r24, r25
    1a78:	8c 93       	st	X, r24

			/*Start Conversion on the select channel*/
			Set_Bit(ADCSRA, 6);
    1a7a:	a6 e2       	ldi	r26, 0x26	; 38
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	e6 e2       	ldi	r30, 0x26	; 38
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	80 64       	ori	r24, 0x40	; 64
    1a86:	8c 93       	st	X, r24

			/*Wait for the conversion to finish*/
			while(Get_Bit(ADCSRA, 6) != 0)
    1a88:	e6 e2       	ldi	r30, 0x26	; 38
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	82 95       	swap	r24
    1a90:	86 95       	lsr	r24
    1a92:	86 95       	lsr	r24
    1a94:	83 70       	andi	r24, 0x03	; 3
    1a96:	88 2f       	mov	r24, r24
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	81 70       	andi	r24, 0x01	; 1
    1a9c:	90 70       	andi	r25, 0x00	; 0
    1a9e:	88 23       	and	r24, r24
    1aa0:	99 f7       	brne	.-26     	; 0x1a88 <ADC_u16ReadChannel+0x5c>
			{

			}

			/*Read the lower segment of the result first*/
			Result = ADCL;
    1aa2:	e4 e2       	ldi	r30, 0x24	; 36
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	80 81       	ld	r24, Z
    1aa8:	88 2f       	mov	r24, r24
    1aaa:	90 e0       	ldi	r25, 0x00	; 0
    1aac:	9a 83       	std	Y+2, r25	; 0x02
    1aae:	89 83       	std	Y+1, r24	; 0x01

			/*Read the higher segment of the result*/
			Result |= (ADCH << 8);
    1ab0:	e5 e2       	ldi	r30, 0x25	; 37
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	80 81       	ld	r24, Z
    1ab6:	88 2f       	mov	r24, r24
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	98 2f       	mov	r25, r24
    1abc:	88 27       	eor	r24, r24
    1abe:	9c 01       	movw	r18, r24
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ac4:	82 2b       	or	r24, r18
    1ac6:	93 2b       	or	r25, r19
    1ac8:	9a 83       	std	Y+2, r25	; 0x02
    1aca:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Result;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	9a 81       	ldd	r25, Y+2	; 0x02
}
    1ad0:	0f 90       	pop	r0
    1ad2:	0f 90       	pop	r0
    1ad4:	0f 90       	pop	r0
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <LCD_vidInit>:
 * Description: Shall Initialize LCD Module
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidInit(void)
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	e8 97       	sbiw	r28, 0x38	; 56
    1ae6:	0f b6       	in	r0, 0x3f	; 63
    1ae8:	f8 94       	cli
    1aea:	de bf       	out	0x3e, r29	; 62
    1aec:	0f be       	out	0x3f, r0	; 63
    1aee:	cd bf       	out	0x3d, r28	; 61
    1af0:	80 e0       	ldi	r24, 0x00	; 0
    1af2:	90 e0       	ldi	r25, 0x00	; 0
    1af4:	a0 ef       	ldi	r26, 0xF0	; 240
    1af6:	b1 e4       	ldi	r27, 0x41	; 65
    1af8:	8d ab       	std	Y+53, r24	; 0x35
    1afa:	9e ab       	std	Y+54, r25	; 0x36
    1afc:	af ab       	std	Y+55, r26	; 0x37
    1afe:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b00:	6d a9       	ldd	r22, Y+53	; 0x35
    1b02:	7e a9       	ldd	r23, Y+54	; 0x36
    1b04:	8f a9       	ldd	r24, Y+55	; 0x37
    1b06:	98 ad       	ldd	r25, Y+56	; 0x38
    1b08:	20 e0       	ldi	r18, 0x00	; 0
    1b0a:	30 e8       	ldi	r19, 0x80	; 128
    1b0c:	4b e3       	ldi	r20, 0x3B	; 59
    1b0e:	55 e4       	ldi	r21, 0x45	; 69
    1b10:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b14:	dc 01       	movw	r26, r24
    1b16:	cb 01       	movw	r24, r22
    1b18:	89 ab       	std	Y+49, r24	; 0x31
    1b1a:	9a ab       	std	Y+50, r25	; 0x32
    1b1c:	ab ab       	std	Y+51, r26	; 0x33
    1b1e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1b20:	69 a9       	ldd	r22, Y+49	; 0x31
    1b22:	7a a9       	ldd	r23, Y+50	; 0x32
    1b24:	8b a9       	ldd	r24, Y+51	; 0x33
    1b26:	9c a9       	ldd	r25, Y+52	; 0x34
    1b28:	20 e0       	ldi	r18, 0x00	; 0
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	40 e8       	ldi	r20, 0x80	; 128
    1b2e:	5f e3       	ldi	r21, 0x3F	; 63
    1b30:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1b34:	88 23       	and	r24, r24
    1b36:	2c f4       	brge	.+10     	; 0x1b42 <LCD_vidInit+0x66>
		__ticks = 1;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
    1b3c:	98 ab       	std	Y+48, r25	; 0x30
    1b3e:	8f a7       	std	Y+47, r24	; 0x2f
    1b40:	3f c0       	rjmp	.+126    	; 0x1bc0 <LCD_vidInit+0xe4>
	else if (__tmp > 65535)
    1b42:	69 a9       	ldd	r22, Y+49	; 0x31
    1b44:	7a a9       	ldd	r23, Y+50	; 0x32
    1b46:	8b a9       	ldd	r24, Y+51	; 0x33
    1b48:	9c a9       	ldd	r25, Y+52	; 0x34
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	3f ef       	ldi	r19, 0xFF	; 255
    1b4e:	4f e7       	ldi	r20, 0x7F	; 127
    1b50:	57 e4       	ldi	r21, 0x47	; 71
    1b52:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1b56:	18 16       	cp	r1, r24
    1b58:	4c f5       	brge	.+82     	; 0x1bac <LCD_vidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b5a:	6d a9       	ldd	r22, Y+53	; 0x35
    1b5c:	7e a9       	ldd	r23, Y+54	; 0x36
    1b5e:	8f a9       	ldd	r24, Y+55	; 0x37
    1b60:	98 ad       	ldd	r25, Y+56	; 0x38
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	40 e2       	ldi	r20, 0x20	; 32
    1b68:	51 e4       	ldi	r21, 0x41	; 65
    1b6a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1b6e:	dc 01       	movw	r26, r24
    1b70:	cb 01       	movw	r24, r22
    1b72:	bc 01       	movw	r22, r24
    1b74:	cd 01       	movw	r24, r26
    1b76:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1b7a:	dc 01       	movw	r26, r24
    1b7c:	cb 01       	movw	r24, r22
    1b7e:	98 ab       	std	Y+48, r25	; 0x30
    1b80:	8f a7       	std	Y+47, r24	; 0x2f
    1b82:	0f c0       	rjmp	.+30     	; 0x1ba2 <LCD_vidInit+0xc6>
    1b84:	8c e2       	ldi	r24, 0x2C	; 44
    1b86:	91 e0       	ldi	r25, 0x01	; 1
    1b88:	9e a7       	std	Y+46, r25	; 0x2e
    1b8a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1b8c:	8d a5       	ldd	r24, Y+45	; 0x2d
    1b8e:	9e a5       	ldd	r25, Y+46	; 0x2e
    1b90:	01 97       	sbiw	r24, 0x01	; 1
    1b92:	f1 f7       	brne	.-4      	; 0x1b90 <LCD_vidInit+0xb4>
    1b94:	9e a7       	std	Y+46, r25	; 0x2e
    1b96:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b98:	8f a5       	ldd	r24, Y+47	; 0x2f
    1b9a:	98 a9       	ldd	r25, Y+48	; 0x30
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	98 ab       	std	Y+48, r25	; 0x30
    1ba0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ba2:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ba4:	98 a9       	ldd	r25, Y+48	; 0x30
    1ba6:	00 97       	sbiw	r24, 0x00	; 0
    1ba8:	69 f7       	brne	.-38     	; 0x1b84 <LCD_vidInit+0xa8>
    1baa:	14 c0       	rjmp	.+40     	; 0x1bd4 <LCD_vidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bac:	69 a9       	ldd	r22, Y+49	; 0x31
    1bae:	7a a9       	ldd	r23, Y+50	; 0x32
    1bb0:	8b a9       	ldd	r24, Y+51	; 0x33
    1bb2:	9c a9       	ldd	r25, Y+52	; 0x34
    1bb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1bb8:	dc 01       	movw	r26, r24
    1bba:	cb 01       	movw	r24, r22
    1bbc:	98 ab       	std	Y+48, r25	; 0x30
    1bbe:	8f a7       	std	Y+47, r24	; 0x2f
    1bc0:	8f a5       	ldd	r24, Y+47	; 0x2f
    1bc2:	98 a9       	ldd	r25, Y+48	; 0x30
    1bc4:	9c a7       	std	Y+44, r25	; 0x2c
    1bc6:	8b a7       	std	Y+43, r24	; 0x2b
    1bc8:	8b a5       	ldd	r24, Y+43	; 0x2b
    1bca:	9c a5       	ldd	r25, Y+44	; 0x2c
    1bcc:	01 97       	sbiw	r24, 0x01	; 1
    1bce:	f1 f7       	brne	.-4      	; 0x1bcc <LCD_vidInit+0xf0>
    1bd0:	9c a7       	std	Y+44, r25	; 0x2c
    1bd2:	8b a7       	std	Y+43, r24	; 0x2b
	/*Wait for 30ms*/
	_delay_ms(30);

	/*Send Funcltion_Set Command*/
	LCD_vidWriteCommand(LCD_FUNCTION_SET);
    1bd4:	88 e3       	ldi	r24, 0x38	; 56
    1bd6:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_vidWriteCommand>
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	a0 e8       	ldi	r26, 0x80	; 128
    1be0:	bf e3       	ldi	r27, 0x3F	; 63
    1be2:	8f a3       	std	Y+39, r24	; 0x27
    1be4:	98 a7       	std	Y+40, r25	; 0x28
    1be6:	a9 a7       	std	Y+41, r26	; 0x29
    1be8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bea:	6f a1       	ldd	r22, Y+39	; 0x27
    1bec:	78 a5       	ldd	r23, Y+40	; 0x28
    1bee:	89 a5       	ldd	r24, Y+41	; 0x29
    1bf0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1bf2:	20 e0       	ldi	r18, 0x00	; 0
    1bf4:	30 e8       	ldi	r19, 0x80	; 128
    1bf6:	4b e3       	ldi	r20, 0x3B	; 59
    1bf8:	55 e4       	ldi	r21, 0x45	; 69
    1bfa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1bfe:	dc 01       	movw	r26, r24
    1c00:	cb 01       	movw	r24, r22
    1c02:	8b a3       	std	Y+35, r24	; 0x23
    1c04:	9c a3       	std	Y+36, r25	; 0x24
    1c06:	ad a3       	std	Y+37, r26	; 0x25
    1c08:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1c0a:	6b a1       	ldd	r22, Y+35	; 0x23
    1c0c:	7c a1       	ldd	r23, Y+36	; 0x24
    1c0e:	8d a1       	ldd	r24, Y+37	; 0x25
    1c10:	9e a1       	ldd	r25, Y+38	; 0x26
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	40 e8       	ldi	r20, 0x80	; 128
    1c18:	5f e3       	ldi	r21, 0x3F	; 63
    1c1a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1c1e:	88 23       	and	r24, r24
    1c20:	2c f4       	brge	.+10     	; 0x1c2c <LCD_vidInit+0x150>
		__ticks = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	90 e0       	ldi	r25, 0x00	; 0
    1c26:	9a a3       	std	Y+34, r25	; 0x22
    1c28:	89 a3       	std	Y+33, r24	; 0x21
    1c2a:	3f c0       	rjmp	.+126    	; 0x1caa <LCD_vidInit+0x1ce>
	else if (__tmp > 65535)
    1c2c:	6b a1       	ldd	r22, Y+35	; 0x23
    1c2e:	7c a1       	ldd	r23, Y+36	; 0x24
    1c30:	8d a1       	ldd	r24, Y+37	; 0x25
    1c32:	9e a1       	ldd	r25, Y+38	; 0x26
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	3f ef       	ldi	r19, 0xFF	; 255
    1c38:	4f e7       	ldi	r20, 0x7F	; 127
    1c3a:	57 e4       	ldi	r21, 0x47	; 71
    1c3c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1c40:	18 16       	cp	r1, r24
    1c42:	4c f5       	brge	.+82     	; 0x1c96 <LCD_vidInit+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c44:	6f a1       	ldd	r22, Y+39	; 0x27
    1c46:	78 a5       	ldd	r23, Y+40	; 0x28
    1c48:	89 a5       	ldd	r24, Y+41	; 0x29
    1c4a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	30 e0       	ldi	r19, 0x00	; 0
    1c50:	40 e2       	ldi	r20, 0x20	; 32
    1c52:	51 e4       	ldi	r21, 0x41	; 65
    1c54:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	bc 01       	movw	r22, r24
    1c5e:	cd 01       	movw	r24, r26
    1c60:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1c64:	dc 01       	movw	r26, r24
    1c66:	cb 01       	movw	r24, r22
    1c68:	9a a3       	std	Y+34, r25	; 0x22
    1c6a:	89 a3       	std	Y+33, r24	; 0x21
    1c6c:	0f c0       	rjmp	.+30     	; 0x1c8c <LCD_vidInit+0x1b0>
    1c6e:	8c e2       	ldi	r24, 0x2C	; 44
    1c70:	91 e0       	ldi	r25, 0x01	; 1
    1c72:	98 a3       	std	Y+32, r25	; 0x20
    1c74:	8f 8f       	std	Y+31, r24	; 0x1f
    1c76:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1c78:	98 a1       	ldd	r25, Y+32	; 0x20
    1c7a:	01 97       	sbiw	r24, 0x01	; 1
    1c7c:	f1 f7       	brne	.-4      	; 0x1c7a <LCD_vidInit+0x19e>
    1c7e:	98 a3       	std	Y+32, r25	; 0x20
    1c80:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c82:	89 a1       	ldd	r24, Y+33	; 0x21
    1c84:	9a a1       	ldd	r25, Y+34	; 0x22
    1c86:	01 97       	sbiw	r24, 0x01	; 1
    1c88:	9a a3       	std	Y+34, r25	; 0x22
    1c8a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c8c:	89 a1       	ldd	r24, Y+33	; 0x21
    1c8e:	9a a1       	ldd	r25, Y+34	; 0x22
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	69 f7       	brne	.-38     	; 0x1c6e <LCD_vidInit+0x192>
    1c94:	14 c0       	rjmp	.+40     	; 0x1cbe <LCD_vidInit+0x1e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c96:	6b a1       	ldd	r22, Y+35	; 0x23
    1c98:	7c a1       	ldd	r23, Y+36	; 0x24
    1c9a:	8d a1       	ldd	r24, Y+37	; 0x25
    1c9c:	9e a1       	ldd	r25, Y+38	; 0x26
    1c9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1ca2:	dc 01       	movw	r26, r24
    1ca4:	cb 01       	movw	r24, r22
    1ca6:	9a a3       	std	Y+34, r25	; 0x22
    1ca8:	89 a3       	std	Y+33, r24	; 0x21
    1caa:	89 a1       	ldd	r24, Y+33	; 0x21
    1cac:	9a a1       	ldd	r25, Y+34	; 0x22
    1cae:	9e 8f       	std	Y+30, r25	; 0x1e
    1cb0:	8d 8f       	std	Y+29, r24	; 0x1d
    1cb2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1cb4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	f1 f7       	brne	.-4      	; 0x1cb6 <LCD_vidInit+0x1da>
    1cba:	9e 8f       	std	Y+30, r25	; 0x1e
    1cbc:	8d 8f       	std	Y+29, r24	; 0x1d

	/*Wait for 1ms*/
	_delay_ms(1);

	/*Send Display Status Command*/
	LCD_vidWriteCommand(LCD_DISPLAY_ON);
    1cbe:	8c e0       	ldi	r24, 0x0C	; 12
    1cc0:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_vidWriteCommand>
    1cc4:	80 e0       	ldi	r24, 0x00	; 0
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	a0 e8       	ldi	r26, 0x80	; 128
    1cca:	bf e3       	ldi	r27, 0x3F	; 63
    1ccc:	89 8f       	std	Y+25, r24	; 0x19
    1cce:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd0:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    1cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cdc:	20 e0       	ldi	r18, 0x00	; 0
    1cde:	30 e8       	ldi	r19, 0x80	; 128
    1ce0:	4b e3       	ldi	r20, 0x3B	; 59
    1ce2:	55 e4       	ldi	r21, 0x45	; 69
    1ce4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ce8:	dc 01       	movw	r26, r24
    1cea:	cb 01       	movw	r24, r22
    1cec:	8d 8b       	std	Y+21, r24	; 0x15
    1cee:	9e 8b       	std	Y+22, r25	; 0x16
    1cf0:	af 8b       	std	Y+23, r26	; 0x17
    1cf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    1cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	40 e8       	ldi	r20, 0x80	; 128
    1d02:	5f e3       	ldi	r21, 0x3F	; 63
    1d04:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d08:	88 23       	and	r24, r24
    1d0a:	2c f4       	brge	.+10     	; 0x1d16 <LCD_vidInit+0x23a>
		__ticks = 1;
    1d0c:	81 e0       	ldi	r24, 0x01	; 1
    1d0e:	90 e0       	ldi	r25, 0x00	; 0
    1d10:	9c 8b       	std	Y+20, r25	; 0x14
    1d12:	8b 8b       	std	Y+19, r24	; 0x13
    1d14:	3f c0       	rjmp	.+126    	; 0x1d94 <LCD_vidInit+0x2b8>
	else if (__tmp > 65535)
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	7e 89       	ldd	r23, Y+22	; 0x16
    1d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d1e:	20 e0       	ldi	r18, 0x00	; 0
    1d20:	3f ef       	ldi	r19, 0xFF	; 255
    1d22:	4f e7       	ldi	r20, 0x7F	; 127
    1d24:	57 e4       	ldi	r21, 0x47	; 71
    1d26:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d2a:	18 16       	cp	r1, r24
    1d2c:	4c f5       	brge	.+82     	; 0x1d80 <LCD_vidInit+0x2a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d2e:	69 8d       	ldd	r22, Y+25	; 0x19
    1d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d36:	20 e0       	ldi	r18, 0x00	; 0
    1d38:	30 e0       	ldi	r19, 0x00	; 0
    1d3a:	40 e2       	ldi	r20, 0x20	; 32
    1d3c:	51 e4       	ldi	r21, 0x41	; 65
    1d3e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d42:	dc 01       	movw	r26, r24
    1d44:	cb 01       	movw	r24, r22
    1d46:	bc 01       	movw	r22, r24
    1d48:	cd 01       	movw	r24, r26
    1d4a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d4e:	dc 01       	movw	r26, r24
    1d50:	cb 01       	movw	r24, r22
    1d52:	9c 8b       	std	Y+20, r25	; 0x14
    1d54:	8b 8b       	std	Y+19, r24	; 0x13
    1d56:	0f c0       	rjmp	.+30     	; 0x1d76 <LCD_vidInit+0x29a>
    1d58:	8c e2       	ldi	r24, 0x2C	; 44
    1d5a:	91 e0       	ldi	r25, 0x01	; 1
    1d5c:	9a 8b       	std	Y+18, r25	; 0x12
    1d5e:	89 8b       	std	Y+17, r24	; 0x11
    1d60:	89 89       	ldd	r24, Y+17	; 0x11
    1d62:	9a 89       	ldd	r25, Y+18	; 0x12
    1d64:	01 97       	sbiw	r24, 0x01	; 1
    1d66:	f1 f7       	brne	.-4      	; 0x1d64 <LCD_vidInit+0x288>
    1d68:	9a 8b       	std	Y+18, r25	; 0x12
    1d6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d70:	01 97       	sbiw	r24, 0x01	; 1
    1d72:	9c 8b       	std	Y+20, r25	; 0x14
    1d74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d76:	8b 89       	ldd	r24, Y+19	; 0x13
    1d78:	9c 89       	ldd	r25, Y+20	; 0x14
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	69 f7       	brne	.-38     	; 0x1d58 <LCD_vidInit+0x27c>
    1d7e:	14 c0       	rjmp	.+40     	; 0x1da8 <LCD_vidInit+0x2cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d80:	6d 89       	ldd	r22, Y+21	; 0x15
    1d82:	7e 89       	ldd	r23, Y+22	; 0x16
    1d84:	8f 89       	ldd	r24, Y+23	; 0x17
    1d86:	98 8d       	ldd	r25, Y+24	; 0x18
    1d88:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d8c:	dc 01       	movw	r26, r24
    1d8e:	cb 01       	movw	r24, r22
    1d90:	9c 8b       	std	Y+20, r25	; 0x14
    1d92:	8b 8b       	std	Y+19, r24	; 0x13
    1d94:	8b 89       	ldd	r24, Y+19	; 0x13
    1d96:	9c 89       	ldd	r25, Y+20	; 0x14
    1d98:	98 8b       	std	Y+16, r25	; 0x10
    1d9a:	8f 87       	std	Y+15, r24	; 0x0f
    1d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d9e:	98 89       	ldd	r25, Y+16	; 0x10
    1da0:	01 97       	sbiw	r24, 0x01	; 1
    1da2:	f1 f7       	brne	.-4      	; 0x1da0 <LCD_vidInit+0x2c4>
    1da4:	98 8b       	std	Y+16, r25	; 0x10
    1da6:	8f 87       	std	Y+15, r24	; 0x0f

	/*Wait for 1ms*/
	_delay_ms(1);

	/*Send Display_Clear Command*/
	LCD_vidWriteCommand(LCD_CLEAR);
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_vidWriteCommand>
    1dae:	80 e0       	ldi	r24, 0x00	; 0
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	a0 e0       	ldi	r26, 0x00	; 0
    1db4:	b0 e4       	ldi	r27, 0x40	; 64
    1db6:	8b 87       	std	Y+11, r24	; 0x0b
    1db8:	9c 87       	std	Y+12, r25	; 0x0c
    1dba:	ad 87       	std	Y+13, r26	; 0x0d
    1dbc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dbe:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dc0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dc2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dc4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dc6:	20 e0       	ldi	r18, 0x00	; 0
    1dc8:	30 e8       	ldi	r19, 0x80	; 128
    1dca:	4b e3       	ldi	r20, 0x3B	; 59
    1dcc:	55 e4       	ldi	r21, 0x45	; 69
    1dce:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1dd2:	dc 01       	movw	r26, r24
    1dd4:	cb 01       	movw	r24, r22
    1dd6:	8f 83       	std	Y+7, r24	; 0x07
    1dd8:	98 87       	std	Y+8, r25	; 0x08
    1dda:	a9 87       	std	Y+9, r26	; 0x09
    1ddc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dde:	6f 81       	ldd	r22, Y+7	; 0x07
    1de0:	78 85       	ldd	r23, Y+8	; 0x08
    1de2:	89 85       	ldd	r24, Y+9	; 0x09
    1de4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1de6:	20 e0       	ldi	r18, 0x00	; 0
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	40 e8       	ldi	r20, 0x80	; 128
    1dec:	5f e3       	ldi	r21, 0x3F	; 63
    1dee:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1df2:	88 23       	and	r24, r24
    1df4:	2c f4       	brge	.+10     	; 0x1e00 <LCD_vidInit+0x324>
		__ticks = 1;
    1df6:	81 e0       	ldi	r24, 0x01	; 1
    1df8:	90 e0       	ldi	r25, 0x00	; 0
    1dfa:	9e 83       	std	Y+6, r25	; 0x06
    1dfc:	8d 83       	std	Y+5, r24	; 0x05
    1dfe:	3f c0       	rjmp	.+126    	; 0x1e7e <LCD_vidInit+0x3a2>
	else if (__tmp > 65535)
    1e00:	6f 81       	ldd	r22, Y+7	; 0x07
    1e02:	78 85       	ldd	r23, Y+8	; 0x08
    1e04:	89 85       	ldd	r24, Y+9	; 0x09
    1e06:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e08:	20 e0       	ldi	r18, 0x00	; 0
    1e0a:	3f ef       	ldi	r19, 0xFF	; 255
    1e0c:	4f e7       	ldi	r20, 0x7F	; 127
    1e0e:	57 e4       	ldi	r21, 0x47	; 71
    1e10:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e14:	18 16       	cp	r1, r24
    1e16:	4c f5       	brge	.+82     	; 0x1e6a <LCD_vidInit+0x38e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e18:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e20:	20 e0       	ldi	r18, 0x00	; 0
    1e22:	30 e0       	ldi	r19, 0x00	; 0
    1e24:	40 e2       	ldi	r20, 0x20	; 32
    1e26:	51 e4       	ldi	r21, 0x41	; 65
    1e28:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e2c:	dc 01       	movw	r26, r24
    1e2e:	cb 01       	movw	r24, r22
    1e30:	bc 01       	movw	r22, r24
    1e32:	cd 01       	movw	r24, r26
    1e34:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e38:	dc 01       	movw	r26, r24
    1e3a:	cb 01       	movw	r24, r22
    1e3c:	9e 83       	std	Y+6, r25	; 0x06
    1e3e:	8d 83       	std	Y+5, r24	; 0x05
    1e40:	0f c0       	rjmp	.+30     	; 0x1e60 <LCD_vidInit+0x384>
    1e42:	8c e2       	ldi	r24, 0x2C	; 44
    1e44:	91 e0       	ldi	r25, 0x01	; 1
    1e46:	9c 83       	std	Y+4, r25	; 0x04
    1e48:	8b 83       	std	Y+3, r24	; 0x03
    1e4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4e:	01 97       	sbiw	r24, 0x01	; 1
    1e50:	f1 f7       	brne	.-4      	; 0x1e4e <LCD_vidInit+0x372>
    1e52:	9c 83       	std	Y+4, r25	; 0x04
    1e54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e56:	8d 81       	ldd	r24, Y+5	; 0x05
    1e58:	9e 81       	ldd	r25, Y+6	; 0x06
    1e5a:	01 97       	sbiw	r24, 0x01	; 1
    1e5c:	9e 83       	std	Y+6, r25	; 0x06
    1e5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e60:	8d 81       	ldd	r24, Y+5	; 0x05
    1e62:	9e 81       	ldd	r25, Y+6	; 0x06
    1e64:	00 97       	sbiw	r24, 0x00	; 0
    1e66:	69 f7       	brne	.-38     	; 0x1e42 <LCD_vidInit+0x366>
    1e68:	14 c0       	rjmp	.+40     	; 0x1e92 <LCD_vidInit+0x3b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e6a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6c:	78 85       	ldd	r23, Y+8	; 0x08
    1e6e:	89 85       	ldd	r24, Y+9	; 0x09
    1e70:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e72:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e76:	dc 01       	movw	r26, r24
    1e78:	cb 01       	movw	r24, r22
    1e7a:	9e 83       	std	Y+6, r25	; 0x06
    1e7c:	8d 83       	std	Y+5, r24	; 0x05
    1e7e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e80:	9e 81       	ldd	r25, Y+6	; 0x06
    1e82:	9a 83       	std	Y+2, r25	; 0x02
    1e84:	89 83       	std	Y+1, r24	; 0x01
    1e86:	89 81       	ldd	r24, Y+1	; 0x01
    1e88:	9a 81       	ldd	r25, Y+2	; 0x02
    1e8a:	01 97       	sbiw	r24, 0x01	; 1
    1e8c:	f1 f7       	brne	.-4      	; 0x1e8a <LCD_vidInit+0x3ae>
    1e8e:	9a 83       	std	Y+2, r25	; 0x02
    1e90:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for 2ms*/
	_delay_ms(2);

	/*Send the configured Entry Mode*/
	LCD_vidWriteCommand(LCD_ENTRY_MODE);
    1e92:	86 e0       	ldi	r24, 0x06	; 6
    1e94:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_vidWriteCommand>
}
    1e98:	e8 96       	adiw	r28, 0x38	; 56
    1e9a:	0f b6       	in	r0, 0x3f	; 63
    1e9c:	f8 94       	cli
    1e9e:	de bf       	out	0x3e, r29	; 62
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	cd bf       	out	0x3d, r28	; 61
    1ea4:	cf 91       	pop	r28
    1ea6:	df 91       	pop	r29
    1ea8:	08 95       	ret

00001eaa <LCD_vidWriteCommand>:
 * Input      : None
 * Output     : None
 * Last_Author: MALKY
 * **********************************************/
void LCD_vidWriteCommand(uint8_t Command)
{
    1eaa:	df 93       	push	r29
    1eac:	cf 93       	push	r28
    1eae:	cd b7       	in	r28, 0x3d	; 61
    1eb0:	de b7       	in	r29, 0x3e	; 62
    1eb2:	6d 97       	sbiw	r28, 0x1d	; 29
    1eb4:	0f b6       	in	r0, 0x3f	; 63
    1eb6:	f8 94       	cli
    1eb8:	de bf       	out	0x3e, r29	; 62
    1eba:	0f be       	out	0x3f, r0	; 63
    1ebc:	cd bf       	out	0x3d, r28	; 61
    1ebe:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Clear RS Signal*/
	Dio_vidWritePin(Dio_PORTC, 0, Dio_Low);
    1ec0:	82 e0       	ldi	r24, 0x02	; 2
    1ec2:	60 e0       	ldi	r22, 0x00	; 0
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	0e 94 11 09 	call	0x1222	; 0x1222 <Dio_vidWritePin>

	/*Clear R\W Signal*/
	Dio_vidWritePin(Dio_PORTC, 1, Dio_Low);
    1eca:	82 e0       	ldi	r24, 0x02	; 2
    1ecc:	61 e0       	ldi	r22, 0x01	; 1
    1ece:	40 e0       	ldi	r20, 0x00	; 0
    1ed0:	0e 94 11 09 	call	0x1222	; 0x1222 <Dio_vidWritePin>

	/*Write the Command to the Data Port*/
	Dio_vidWritePort(Dio_PORTA, Command);
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1ed8:	0e 94 03 0a 	call	0x1406	; 0x1406 <Dio_vidWritePort>

	/*Set the Enable Signal*/
	Dio_vidWritePin(Dio_PORTC, 2, Dio_High);
    1edc:	82 e0       	ldi	r24, 0x02	; 2
    1ede:	62 e0       	ldi	r22, 0x02	; 2
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	0e 94 11 09 	call	0x1222	; 0x1222 <Dio_vidWritePin>
    1ee6:	80 e0       	ldi	r24, 0x00	; 0
    1ee8:	90 e0       	ldi	r25, 0x00	; 0
    1eea:	a0 e8       	ldi	r26, 0x80	; 128
    1eec:	bf e3       	ldi	r27, 0x3F	; 63
    1eee:	89 8f       	std	Y+25, r24	; 0x19
    1ef0:	9a 8f       	std	Y+26, r25	; 0x1a
    1ef2:	ab 8f       	std	Y+27, r26	; 0x1b
    1ef4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef6:	69 8d       	ldd	r22, Y+25	; 0x19
    1ef8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1efa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1efc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1efe:	20 e0       	ldi	r18, 0x00	; 0
    1f00:	30 e8       	ldi	r19, 0x80	; 128
    1f02:	4b e3       	ldi	r20, 0x3B	; 59
    1f04:	55 e4       	ldi	r21, 0x45	; 69
    1f06:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f0a:	dc 01       	movw	r26, r24
    1f0c:	cb 01       	movw	r24, r22
    1f0e:	8d 8b       	std	Y+21, r24	; 0x15
    1f10:	9e 8b       	std	Y+22, r25	; 0x16
    1f12:	af 8b       	std	Y+23, r26	; 0x17
    1f14:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1f16:	6d 89       	ldd	r22, Y+21	; 0x15
    1f18:	7e 89       	ldd	r23, Y+22	; 0x16
    1f1a:	8f 89       	ldd	r24, Y+23	; 0x17
    1f1c:	98 8d       	ldd	r25, Y+24	; 0x18
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	40 e8       	ldi	r20, 0x80	; 128
    1f24:	5f e3       	ldi	r21, 0x3F	; 63
    1f26:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1f2a:	88 23       	and	r24, r24
    1f2c:	2c f4       	brge	.+10     	; 0x1f38 <LCD_vidWriteCommand+0x8e>
		__ticks = 1;
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	9c 8b       	std	Y+20, r25	; 0x14
    1f34:	8b 8b       	std	Y+19, r24	; 0x13
    1f36:	3f c0       	rjmp	.+126    	; 0x1fb6 <LCD_vidWriteCommand+0x10c>
	else if (__tmp > 65535)
    1f38:	6d 89       	ldd	r22, Y+21	; 0x15
    1f3a:	7e 89       	ldd	r23, Y+22	; 0x16
    1f3c:	8f 89       	ldd	r24, Y+23	; 0x17
    1f3e:	98 8d       	ldd	r25, Y+24	; 0x18
    1f40:	20 e0       	ldi	r18, 0x00	; 0
    1f42:	3f ef       	ldi	r19, 0xFF	; 255
    1f44:	4f e7       	ldi	r20, 0x7F	; 127
    1f46:	57 e4       	ldi	r21, 0x47	; 71
    1f48:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1f4c:	18 16       	cp	r1, r24
    1f4e:	4c f5       	brge	.+82     	; 0x1fa2 <LCD_vidWriteCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f50:	69 8d       	ldd	r22, Y+25	; 0x19
    1f52:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1f54:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1f56:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1f58:	20 e0       	ldi	r18, 0x00	; 0
    1f5a:	30 e0       	ldi	r19, 0x00	; 0
    1f5c:	40 e2       	ldi	r20, 0x20	; 32
    1f5e:	51 e4       	ldi	r21, 0x41	; 65
    1f60:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f64:	dc 01       	movw	r26, r24
    1f66:	cb 01       	movw	r24, r22
    1f68:	bc 01       	movw	r22, r24
    1f6a:	cd 01       	movw	r24, r26
    1f6c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f70:	dc 01       	movw	r26, r24
    1f72:	cb 01       	movw	r24, r22
    1f74:	9c 8b       	std	Y+20, r25	; 0x14
    1f76:	8b 8b       	std	Y+19, r24	; 0x13
    1f78:	0f c0       	rjmp	.+30     	; 0x1f98 <LCD_vidWriteCommand+0xee>
    1f7a:	8c e2       	ldi	r24, 0x2C	; 44
    1f7c:	91 e0       	ldi	r25, 0x01	; 1
    1f7e:	9a 8b       	std	Y+18, r25	; 0x12
    1f80:	89 8b       	std	Y+17, r24	; 0x11
    1f82:	89 89       	ldd	r24, Y+17	; 0x11
    1f84:	9a 89       	ldd	r25, Y+18	; 0x12
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_vidWriteCommand+0xdc>
    1f8a:	9a 8b       	std	Y+18, r25	; 0x12
    1f8c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f8e:	8b 89       	ldd	r24, Y+19	; 0x13
    1f90:	9c 89       	ldd	r25, Y+20	; 0x14
    1f92:	01 97       	sbiw	r24, 0x01	; 1
    1f94:	9c 8b       	std	Y+20, r25	; 0x14
    1f96:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f98:	8b 89       	ldd	r24, Y+19	; 0x13
    1f9a:	9c 89       	ldd	r25, Y+20	; 0x14
    1f9c:	00 97       	sbiw	r24, 0x00	; 0
    1f9e:	69 f7       	brne	.-38     	; 0x1f7a <LCD_vidWriteCommand+0xd0>
    1fa0:	14 c0       	rjmp	.+40     	; 0x1fca <LCD_vidWriteCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1fa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1fa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1fa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1faa:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fae:	dc 01       	movw	r26, r24
    1fb0:	cb 01       	movw	r24, r22
    1fb2:	9c 8b       	std	Y+20, r25	; 0x14
    1fb4:	8b 8b       	std	Y+19, r24	; 0x13
    1fb6:	8b 89       	ldd	r24, Y+19	; 0x13
    1fb8:	9c 89       	ldd	r25, Y+20	; 0x14
    1fba:	98 8b       	std	Y+16, r25	; 0x10
    1fbc:	8f 87       	std	Y+15, r24	; 0x0f
    1fbe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1fc0:	98 89       	ldd	r25, Y+16	; 0x10
    1fc2:	01 97       	sbiw	r24, 0x01	; 1
    1fc4:	f1 f7       	brne	.-4      	; 0x1fc2 <LCD_vidWriteCommand+0x118>
    1fc6:	98 8b       	std	Y+16, r25	; 0x10
    1fc8:	8f 87       	std	Y+15, r24	; 0x0f

	/*Wait for a while (1ms)*/
	_delay_ms(1);

	/*Clear Enable Signal*/
	Dio_vidWritePin(Dio_PORTC, 2, Dio_Low);
    1fca:	82 e0       	ldi	r24, 0x02	; 2
    1fcc:	62 e0       	ldi	r22, 0x02	; 2
    1fce:	40 e0       	ldi	r20, 0x00	; 0
    1fd0:	0e 94 11 09 	call	0x1222	; 0x1222 <Dio_vidWritePin>
    1fd4:	80 e0       	ldi	r24, 0x00	; 0
    1fd6:	90 e0       	ldi	r25, 0x00	; 0
    1fd8:	a0 e2       	ldi	r26, 0x20	; 32
    1fda:	b1 e4       	ldi	r27, 0x41	; 65
    1fdc:	8b 87       	std	Y+11, r24	; 0x0b
    1fde:	9c 87       	std	Y+12, r25	; 0x0c
    1fe0:	ad 87       	std	Y+13, r26	; 0x0d
    1fe2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fe4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fe6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fe8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fea:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e8       	ldi	r19, 0x80	; 128
    1ff0:	4b e3       	ldi	r20, 0x3B	; 59
    1ff2:	55 e4       	ldi	r21, 0x45	; 69
    1ff4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	8f 83       	std	Y+7, r24	; 0x07
    1ffe:	98 87       	std	Y+8, r25	; 0x08
    2000:	a9 87       	std	Y+9, r26	; 0x09
    2002:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2004:	6f 81       	ldd	r22, Y+7	; 0x07
    2006:	78 85       	ldd	r23, Y+8	; 0x08
    2008:	89 85       	ldd	r24, Y+9	; 0x09
    200a:	9a 85       	ldd	r25, Y+10	; 0x0a
    200c:	20 e0       	ldi	r18, 0x00	; 0
    200e:	30 e0       	ldi	r19, 0x00	; 0
    2010:	40 e8       	ldi	r20, 0x80	; 128
    2012:	5f e3       	ldi	r21, 0x3F	; 63
    2014:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2018:	88 23       	and	r24, r24
    201a:	2c f4       	brge	.+10     	; 0x2026 <LCD_vidWriteCommand+0x17c>
		__ticks = 1;
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	90 e0       	ldi	r25, 0x00	; 0
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	8d 83       	std	Y+5, r24	; 0x05
    2024:	3f c0       	rjmp	.+126    	; 0x20a4 <LCD_vidWriteCommand+0x1fa>
	else if (__tmp > 65535)
    2026:	6f 81       	ldd	r22, Y+7	; 0x07
    2028:	78 85       	ldd	r23, Y+8	; 0x08
    202a:	89 85       	ldd	r24, Y+9	; 0x09
    202c:	9a 85       	ldd	r25, Y+10	; 0x0a
    202e:	20 e0       	ldi	r18, 0x00	; 0
    2030:	3f ef       	ldi	r19, 0xFF	; 255
    2032:	4f e7       	ldi	r20, 0x7F	; 127
    2034:	57 e4       	ldi	r21, 0x47	; 71
    2036:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    203a:	18 16       	cp	r1, r24
    203c:	4c f5       	brge	.+82     	; 0x2090 <LCD_vidWriteCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    203e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2040:	7c 85       	ldd	r23, Y+12	; 0x0c
    2042:	8d 85       	ldd	r24, Y+13	; 0x0d
    2044:	9e 85       	ldd	r25, Y+14	; 0x0e
    2046:	20 e0       	ldi	r18, 0x00	; 0
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	40 e2       	ldi	r20, 0x20	; 32
    204c:	51 e4       	ldi	r21, 0x41	; 65
    204e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2052:	dc 01       	movw	r26, r24
    2054:	cb 01       	movw	r24, r22
    2056:	bc 01       	movw	r22, r24
    2058:	cd 01       	movw	r24, r26
    205a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9e 83       	std	Y+6, r25	; 0x06
    2064:	8d 83       	std	Y+5, r24	; 0x05
    2066:	0f c0       	rjmp	.+30     	; 0x2086 <LCD_vidWriteCommand+0x1dc>
    2068:	8c e2       	ldi	r24, 0x2C	; 44
    206a:	91 e0       	ldi	r25, 0x01	; 1
    206c:	9c 83       	std	Y+4, r25	; 0x04
    206e:	8b 83       	std	Y+3, r24	; 0x03
    2070:	8b 81       	ldd	r24, Y+3	; 0x03
    2072:	9c 81       	ldd	r25, Y+4	; 0x04
    2074:	01 97       	sbiw	r24, 0x01	; 1
    2076:	f1 f7       	brne	.-4      	; 0x2074 <LCD_vidWriteCommand+0x1ca>
    2078:	9c 83       	std	Y+4, r25	; 0x04
    207a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    207c:	8d 81       	ldd	r24, Y+5	; 0x05
    207e:	9e 81       	ldd	r25, Y+6	; 0x06
    2080:	01 97       	sbiw	r24, 0x01	; 1
    2082:	9e 83       	std	Y+6, r25	; 0x06
    2084:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2086:	8d 81       	ldd	r24, Y+5	; 0x05
    2088:	9e 81       	ldd	r25, Y+6	; 0x06
    208a:	00 97       	sbiw	r24, 0x00	; 0
    208c:	69 f7       	brne	.-38     	; 0x2068 <LCD_vidWriteCommand+0x1be>
    208e:	14 c0       	rjmp	.+40     	; 0x20b8 <LCD_vidWriteCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2090:	6f 81       	ldd	r22, Y+7	; 0x07
    2092:	78 85       	ldd	r23, Y+8	; 0x08
    2094:	89 85       	ldd	r24, Y+9	; 0x09
    2096:	9a 85       	ldd	r25, Y+10	; 0x0a
    2098:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    209c:	dc 01       	movw	r26, r24
    209e:	cb 01       	movw	r24, r22
    20a0:	9e 83       	std	Y+6, r25	; 0x06
    20a2:	8d 83       	std	Y+5, r24	; 0x05
    20a4:	8d 81       	ldd	r24, Y+5	; 0x05
    20a6:	9e 81       	ldd	r25, Y+6	; 0x06
    20a8:	9a 83       	std	Y+2, r25	; 0x02
    20aa:	89 83       	std	Y+1, r24	; 0x01
    20ac:	89 81       	ldd	r24, Y+1	; 0x01
    20ae:	9a 81       	ldd	r25, Y+2	; 0x02
    20b0:	01 97       	sbiw	r24, 0x01	; 1
    20b2:	f1 f7       	brne	.-4      	; 0x20b0 <LCD_vidWriteCommand+0x206>
    20b4:	9a 83       	std	Y+2, r25	; 0x02
    20b6:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for the LCD to finish executing*/
	_delay_ms(10);
}
    20b8:	6d 96       	adiw	r28, 0x1d	; 29
    20ba:	0f b6       	in	r0, 0x3f	; 63
    20bc:	f8 94       	cli
    20be:	de bf       	out	0x3e, r29	; 62
    20c0:	0f be       	out	0x3f, r0	; 63
    20c2:	cd bf       	out	0x3d, r28	; 61
    20c4:	cf 91       	pop	r28
    20c6:	df 91       	pop	r29
    20c8:	08 95       	ret

000020ca <LCD_vidWriteData>:
 * Description: Shall Initialize LCD Module
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidWriteData(uint8_t Data)
{
    20ca:	df 93       	push	r29
    20cc:	cf 93       	push	r28
    20ce:	cd b7       	in	r28, 0x3d	; 61
    20d0:	de b7       	in	r29, 0x3e	; 62
    20d2:	6d 97       	sbiw	r28, 0x1d	; 29
    20d4:	0f b6       	in	r0, 0x3f	; 63
    20d6:	f8 94       	cli
    20d8:	de bf       	out	0x3e, r29	; 62
    20da:	0f be       	out	0x3f, r0	; 63
    20dc:	cd bf       	out	0x3d, r28	; 61
    20de:	8d 8f       	std	Y+29, r24	; 0x1d
	/*Set RS Signal*/
	Dio_vidWritePin(Dio_PORTC, 0, Dio_High);
    20e0:	82 e0       	ldi	r24, 0x02	; 2
    20e2:	60 e0       	ldi	r22, 0x00	; 0
    20e4:	41 e0       	ldi	r20, 0x01	; 1
    20e6:	0e 94 11 09 	call	0x1222	; 0x1222 <Dio_vidWritePin>

	/*Clear R\W Signal*/
	Dio_vidWritePin(Dio_PORTC, 1, Dio_Low);
    20ea:	82 e0       	ldi	r24, 0x02	; 2
    20ec:	61 e0       	ldi	r22, 0x01	; 1
    20ee:	40 e0       	ldi	r20, 0x00	; 0
    20f0:	0e 94 11 09 	call	0x1222	; 0x1222 <Dio_vidWritePin>

	/*Write the Data to the Data Port*/
	Dio_vidWritePort(Dio_PORTA, Data);
    20f4:	80 e0       	ldi	r24, 0x00	; 0
    20f6:	6d 8d       	ldd	r22, Y+29	; 0x1d
    20f8:	0e 94 03 0a 	call	0x1406	; 0x1406 <Dio_vidWritePort>

	/*Set the Enable Signal*/
	Dio_vidWritePin(Dio_PORTC, 2, Dio_High);
    20fc:	82 e0       	ldi	r24, 0x02	; 2
    20fe:	62 e0       	ldi	r22, 0x02	; 2
    2100:	41 e0       	ldi	r20, 0x01	; 1
    2102:	0e 94 11 09 	call	0x1222	; 0x1222 <Dio_vidWritePin>
    2106:	80 e0       	ldi	r24, 0x00	; 0
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	a0 e8       	ldi	r26, 0x80	; 128
    210c:	bf e3       	ldi	r27, 0x3F	; 63
    210e:	89 8f       	std	Y+25, r24	; 0x19
    2110:	9a 8f       	std	Y+26, r25	; 0x1a
    2112:	ab 8f       	std	Y+27, r26	; 0x1b
    2114:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2116:	69 8d       	ldd	r22, Y+25	; 0x19
    2118:	7a 8d       	ldd	r23, Y+26	; 0x1a
    211a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    211c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    211e:	20 e0       	ldi	r18, 0x00	; 0
    2120:	30 e8       	ldi	r19, 0x80	; 128
    2122:	4b e3       	ldi	r20, 0x3B	; 59
    2124:	55 e4       	ldi	r21, 0x45	; 69
    2126:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	8d 8b       	std	Y+21, r24	; 0x15
    2130:	9e 8b       	std	Y+22, r25	; 0x16
    2132:	af 8b       	std	Y+23, r26	; 0x17
    2134:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2136:	6d 89       	ldd	r22, Y+21	; 0x15
    2138:	7e 89       	ldd	r23, Y+22	; 0x16
    213a:	8f 89       	ldd	r24, Y+23	; 0x17
    213c:	98 8d       	ldd	r25, Y+24	; 0x18
    213e:	20 e0       	ldi	r18, 0x00	; 0
    2140:	30 e0       	ldi	r19, 0x00	; 0
    2142:	40 e8       	ldi	r20, 0x80	; 128
    2144:	5f e3       	ldi	r21, 0x3F	; 63
    2146:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    214a:	88 23       	and	r24, r24
    214c:	2c f4       	brge	.+10     	; 0x2158 <LCD_vidWriteData+0x8e>
		__ticks = 1;
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	90 e0       	ldi	r25, 0x00	; 0
    2152:	9c 8b       	std	Y+20, r25	; 0x14
    2154:	8b 8b       	std	Y+19, r24	; 0x13
    2156:	3f c0       	rjmp	.+126    	; 0x21d6 <LCD_vidWriteData+0x10c>
	else if (__tmp > 65535)
    2158:	6d 89       	ldd	r22, Y+21	; 0x15
    215a:	7e 89       	ldd	r23, Y+22	; 0x16
    215c:	8f 89       	ldd	r24, Y+23	; 0x17
    215e:	98 8d       	ldd	r25, Y+24	; 0x18
    2160:	20 e0       	ldi	r18, 0x00	; 0
    2162:	3f ef       	ldi	r19, 0xFF	; 255
    2164:	4f e7       	ldi	r20, 0x7F	; 127
    2166:	57 e4       	ldi	r21, 0x47	; 71
    2168:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    216c:	18 16       	cp	r1, r24
    216e:	4c f5       	brge	.+82     	; 0x21c2 <LCD_vidWriteData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2170:	69 8d       	ldd	r22, Y+25	; 0x19
    2172:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2174:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2176:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2178:	20 e0       	ldi	r18, 0x00	; 0
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	40 e2       	ldi	r20, 0x20	; 32
    217e:	51 e4       	ldi	r21, 0x41	; 65
    2180:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2184:	dc 01       	movw	r26, r24
    2186:	cb 01       	movw	r24, r22
    2188:	bc 01       	movw	r22, r24
    218a:	cd 01       	movw	r24, r26
    218c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2190:	dc 01       	movw	r26, r24
    2192:	cb 01       	movw	r24, r22
    2194:	9c 8b       	std	Y+20, r25	; 0x14
    2196:	8b 8b       	std	Y+19, r24	; 0x13
    2198:	0f c0       	rjmp	.+30     	; 0x21b8 <LCD_vidWriteData+0xee>
    219a:	8c e2       	ldi	r24, 0x2C	; 44
    219c:	91 e0       	ldi	r25, 0x01	; 1
    219e:	9a 8b       	std	Y+18, r25	; 0x12
    21a0:	89 8b       	std	Y+17, r24	; 0x11
    21a2:	89 89       	ldd	r24, Y+17	; 0x11
    21a4:	9a 89       	ldd	r25, Y+18	; 0x12
    21a6:	01 97       	sbiw	r24, 0x01	; 1
    21a8:	f1 f7       	brne	.-4      	; 0x21a6 <LCD_vidWriteData+0xdc>
    21aa:	9a 8b       	std	Y+18, r25	; 0x12
    21ac:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ae:	8b 89       	ldd	r24, Y+19	; 0x13
    21b0:	9c 89       	ldd	r25, Y+20	; 0x14
    21b2:	01 97       	sbiw	r24, 0x01	; 1
    21b4:	9c 8b       	std	Y+20, r25	; 0x14
    21b6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21b8:	8b 89       	ldd	r24, Y+19	; 0x13
    21ba:	9c 89       	ldd	r25, Y+20	; 0x14
    21bc:	00 97       	sbiw	r24, 0x00	; 0
    21be:	69 f7       	brne	.-38     	; 0x219a <LCD_vidWriteData+0xd0>
    21c0:	14 c0       	rjmp	.+40     	; 0x21ea <LCD_vidWriteData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21c2:	6d 89       	ldd	r22, Y+21	; 0x15
    21c4:	7e 89       	ldd	r23, Y+22	; 0x16
    21c6:	8f 89       	ldd	r24, Y+23	; 0x17
    21c8:	98 8d       	ldd	r25, Y+24	; 0x18
    21ca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21ce:	dc 01       	movw	r26, r24
    21d0:	cb 01       	movw	r24, r22
    21d2:	9c 8b       	std	Y+20, r25	; 0x14
    21d4:	8b 8b       	std	Y+19, r24	; 0x13
    21d6:	8b 89       	ldd	r24, Y+19	; 0x13
    21d8:	9c 89       	ldd	r25, Y+20	; 0x14
    21da:	98 8b       	std	Y+16, r25	; 0x10
    21dc:	8f 87       	std	Y+15, r24	; 0x0f
    21de:	8f 85       	ldd	r24, Y+15	; 0x0f
    21e0:	98 89       	ldd	r25, Y+16	; 0x10
    21e2:	01 97       	sbiw	r24, 0x01	; 1
    21e4:	f1 f7       	brne	.-4      	; 0x21e2 <LCD_vidWriteData+0x118>
    21e6:	98 8b       	std	Y+16, r25	; 0x10
    21e8:	8f 87       	std	Y+15, r24	; 0x0f

	/*Wait for a while (1ms)*/
	_delay_ms(1);

	/*Clear Enable Signal*/
	Dio_vidWritePin(Dio_PORTC, 2, Dio_Low);
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	62 e0       	ldi	r22, 0x02	; 2
    21ee:	40 e0       	ldi	r20, 0x00	; 0
    21f0:	0e 94 11 09 	call	0x1222	; 0x1222 <Dio_vidWritePin>
    21f4:	80 e0       	ldi	r24, 0x00	; 0
    21f6:	90 e0       	ldi	r25, 0x00	; 0
    21f8:	a0 e2       	ldi	r26, 0x20	; 32
    21fa:	b1 e4       	ldi	r27, 0x41	; 65
    21fc:	8b 87       	std	Y+11, r24	; 0x0b
    21fe:	9c 87       	std	Y+12, r25	; 0x0c
    2200:	ad 87       	std	Y+13, r26	; 0x0d
    2202:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2204:	6b 85       	ldd	r22, Y+11	; 0x0b
    2206:	7c 85       	ldd	r23, Y+12	; 0x0c
    2208:	8d 85       	ldd	r24, Y+13	; 0x0d
    220a:	9e 85       	ldd	r25, Y+14	; 0x0e
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e8       	ldi	r19, 0x80	; 128
    2210:	4b e3       	ldi	r20, 0x3B	; 59
    2212:	55 e4       	ldi	r21, 0x45	; 69
    2214:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	8f 83       	std	Y+7, r24	; 0x07
    221e:	98 87       	std	Y+8, r25	; 0x08
    2220:	a9 87       	std	Y+9, r26	; 0x09
    2222:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2224:	6f 81       	ldd	r22, Y+7	; 0x07
    2226:	78 85       	ldd	r23, Y+8	; 0x08
    2228:	89 85       	ldd	r24, Y+9	; 0x09
    222a:	9a 85       	ldd	r25, Y+10	; 0x0a
    222c:	20 e0       	ldi	r18, 0x00	; 0
    222e:	30 e0       	ldi	r19, 0x00	; 0
    2230:	40 e8       	ldi	r20, 0x80	; 128
    2232:	5f e3       	ldi	r21, 0x3F	; 63
    2234:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2238:	88 23       	and	r24, r24
    223a:	2c f4       	brge	.+10     	; 0x2246 <LCD_vidWriteData+0x17c>
		__ticks = 1;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	90 e0       	ldi	r25, 0x00	; 0
    2240:	9e 83       	std	Y+6, r25	; 0x06
    2242:	8d 83       	std	Y+5, r24	; 0x05
    2244:	3f c0       	rjmp	.+126    	; 0x22c4 <LCD_vidWriteData+0x1fa>
	else if (__tmp > 65535)
    2246:	6f 81       	ldd	r22, Y+7	; 0x07
    2248:	78 85       	ldd	r23, Y+8	; 0x08
    224a:	89 85       	ldd	r24, Y+9	; 0x09
    224c:	9a 85       	ldd	r25, Y+10	; 0x0a
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	3f ef       	ldi	r19, 0xFF	; 255
    2252:	4f e7       	ldi	r20, 0x7F	; 127
    2254:	57 e4       	ldi	r21, 0x47	; 71
    2256:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    225a:	18 16       	cp	r1, r24
    225c:	4c f5       	brge	.+82     	; 0x22b0 <LCD_vidWriteData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    225e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2260:	7c 85       	ldd	r23, Y+12	; 0x0c
    2262:	8d 85       	ldd	r24, Y+13	; 0x0d
    2264:	9e 85       	ldd	r25, Y+14	; 0x0e
    2266:	20 e0       	ldi	r18, 0x00	; 0
    2268:	30 e0       	ldi	r19, 0x00	; 0
    226a:	40 e2       	ldi	r20, 0x20	; 32
    226c:	51 e4       	ldi	r21, 0x41	; 65
    226e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2272:	dc 01       	movw	r26, r24
    2274:	cb 01       	movw	r24, r22
    2276:	bc 01       	movw	r22, r24
    2278:	cd 01       	movw	r24, r26
    227a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    227e:	dc 01       	movw	r26, r24
    2280:	cb 01       	movw	r24, r22
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	0f c0       	rjmp	.+30     	; 0x22a6 <LCD_vidWriteData+0x1dc>
    2288:	8c e2       	ldi	r24, 0x2C	; 44
    228a:	91 e0       	ldi	r25, 0x01	; 1
    228c:	9c 83       	std	Y+4, r25	; 0x04
    228e:	8b 83       	std	Y+3, r24	; 0x03
    2290:	8b 81       	ldd	r24, Y+3	; 0x03
    2292:	9c 81       	ldd	r25, Y+4	; 0x04
    2294:	01 97       	sbiw	r24, 0x01	; 1
    2296:	f1 f7       	brne	.-4      	; 0x2294 <LCD_vidWriteData+0x1ca>
    2298:	9c 83       	std	Y+4, r25	; 0x04
    229a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    229c:	8d 81       	ldd	r24, Y+5	; 0x05
    229e:	9e 81       	ldd	r25, Y+6	; 0x06
    22a0:	01 97       	sbiw	r24, 0x01	; 1
    22a2:	9e 83       	std	Y+6, r25	; 0x06
    22a4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22a6:	8d 81       	ldd	r24, Y+5	; 0x05
    22a8:	9e 81       	ldd	r25, Y+6	; 0x06
    22aa:	00 97       	sbiw	r24, 0x00	; 0
    22ac:	69 f7       	brne	.-38     	; 0x2288 <LCD_vidWriteData+0x1be>
    22ae:	14 c0       	rjmp	.+40     	; 0x22d8 <LCD_vidWriteData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22b0:	6f 81       	ldd	r22, Y+7	; 0x07
    22b2:	78 85       	ldd	r23, Y+8	; 0x08
    22b4:	89 85       	ldd	r24, Y+9	; 0x09
    22b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22bc:	dc 01       	movw	r26, r24
    22be:	cb 01       	movw	r24, r22
    22c0:	9e 83       	std	Y+6, r25	; 0x06
    22c2:	8d 83       	std	Y+5, r24	; 0x05
    22c4:	8d 81       	ldd	r24, Y+5	; 0x05
    22c6:	9e 81       	ldd	r25, Y+6	; 0x06
    22c8:	9a 83       	std	Y+2, r25	; 0x02
    22ca:	89 83       	std	Y+1, r24	; 0x01
    22cc:	89 81       	ldd	r24, Y+1	; 0x01
    22ce:	9a 81       	ldd	r25, Y+2	; 0x02
    22d0:	01 97       	sbiw	r24, 0x01	; 1
    22d2:	f1 f7       	brne	.-4      	; 0x22d0 <LCD_vidWriteData+0x206>
    22d4:	9a 83       	std	Y+2, r25	; 0x02
    22d6:	89 83       	std	Y+1, r24	; 0x01

	/*Wait for the LCD to finish executing*/
	_delay_ms(10);
}
    22d8:	6d 96       	adiw	r28, 0x1d	; 29
    22da:	0f b6       	in	r0, 0x3f	; 63
    22dc:	f8 94       	cli
    22de:	de bf       	out	0x3e, r29	; 62
    22e0:	0f be       	out	0x3f, r0	; 63
    22e2:	cd bf       	out	0x3d, r28	; 61
    22e4:	cf 91       	pop	r28
    22e6:	df 91       	pop	r29
    22e8:	08 95       	ret

000022ea <LCD_vidGoTo>:
 * Description: Shall Initialize LCD Module
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidGoTo(uint8_t Line, uint8_t Column)
{
    22ea:	df 93       	push	r29
    22ec:	cf 93       	push	r28
    22ee:	00 d0       	rcall	.+0      	; 0x22f0 <LCD_vidGoTo+0x6>
    22f0:	00 d0       	rcall	.+0      	; 0x22f2 <LCD_vidGoTo+0x8>
    22f2:	0f 92       	push	r0
    22f4:	cd b7       	in	r28, 0x3d	; 61
    22f6:	de b7       	in	r29, 0x3e	; 62
    22f8:	8a 83       	std	Y+2, r24	; 0x02
    22fa:	6b 83       	std	Y+3, r22	; 0x03
	uint8_t LineBase ;

	if (Column >= 1 && Column <= 16)
    22fc:	8b 81       	ldd	r24, Y+3	; 0x03
    22fe:	88 23       	and	r24, r24
    2300:	e9 f0       	breq	.+58     	; 0x233c <LCD_vidGoTo+0x52>
    2302:	8b 81       	ldd	r24, Y+3	; 0x03
    2304:	81 31       	cpi	r24, 0x11	; 17
    2306:	d0 f4       	brcc	.+52     	; 0x233c <LCD_vidGoTo+0x52>
	{
		switch(Line)
    2308:	8a 81       	ldd	r24, Y+2	; 0x02
    230a:	28 2f       	mov	r18, r24
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	3d 83       	std	Y+5, r19	; 0x05
    2310:	2c 83       	std	Y+4, r18	; 0x04
    2312:	8c 81       	ldd	r24, Y+4	; 0x04
    2314:	9d 81       	ldd	r25, Y+5	; 0x05
    2316:	81 30       	cpi	r24, 0x01	; 1
    2318:	91 05       	cpc	r25, r1
    231a:	31 f0       	breq	.+12     	; 0x2328 <LCD_vidGoTo+0x3e>
    231c:	2c 81       	ldd	r18, Y+4	; 0x04
    231e:	3d 81       	ldd	r19, Y+5	; 0x05
    2320:	22 30       	cpi	r18, 0x02	; 2
    2322:	31 05       	cpc	r19, r1
    2324:	19 f0       	breq	.+6      	; 0x232c <LCD_vidGoTo+0x42>
    2326:	04 c0       	rjmp	.+8      	; 0x2330 <LCD_vidGoTo+0x46>
		{
		case 1:
			LineBase = 0x00;
    2328:	19 82       	std	Y+1, r1	; 0x01
    232a:	02 c0       	rjmp	.+4      	; 0x2330 <LCD_vidGoTo+0x46>
			break;
		case 2:
			LineBase = 0x40;
    232c:	80 e4       	ldi	r24, 0x40	; 64
    232e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}

		LCD_vidWriteCommand(LCD_MOVE_CURSOR + (LineBase + (Column - 1)));
    2330:	9b 81       	ldd	r25, Y+3	; 0x03
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	89 0f       	add	r24, r25
    2336:	81 58       	subi	r24, 0x81	; 129
    2338:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <LCD_vidWriteCommand>
	}
}
    233c:	0f 90       	pop	r0
    233e:	0f 90       	pop	r0
    2340:	0f 90       	pop	r0
    2342:	0f 90       	pop	r0
    2344:	0f 90       	pop	r0
    2346:	cf 91       	pop	r28
    2348:	df 91       	pop	r29
    234a:	08 95       	ret

0000234c <LCD_vidWriteString>:
 * Description: Shall Initialize LCD Module
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidWriteString(uint8_t * Message)
{
    234c:	df 93       	push	r29
    234e:	cf 93       	push	r28
    2350:	00 d0       	rcall	.+0      	; 0x2352 <LCD_vidWriteString+0x6>
    2352:	cd b7       	in	r28, 0x3d	; 61
    2354:	de b7       	in	r29, 0x3e	; 62
    2356:	9a 83       	std	Y+2, r25	; 0x02
    2358:	89 83       	std	Y+1, r24	; 0x01
    235a:	0a c0       	rjmp	.+20     	; 0x2370 <LCD_vidWriteString+0x24>
	while(*Message != '\0')
	{
		LCD_vidWriteData(*Message);
    235c:	e9 81       	ldd	r30, Y+1	; 0x01
    235e:	fa 81       	ldd	r31, Y+2	; 0x02
    2360:	80 81       	ld	r24, Z
    2362:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_vidWriteData>
		Message++;
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	01 96       	adiw	r24, 0x01	; 1
    236c:	9a 83       	std	Y+2, r25	; 0x02
    236e:	89 83       	std	Y+1, r24	; 0x01
 * Input      : None
 * Output     : None
 * *********************************************/
void LCD_vidWriteString(uint8_t * Message)
{
	while(*Message != '\0')
    2370:	e9 81       	ldd	r30, Y+1	; 0x01
    2372:	fa 81       	ldd	r31, Y+2	; 0x02
    2374:	80 81       	ld	r24, Z
    2376:	88 23       	and	r24, r24
    2378:	89 f7       	brne	.-30     	; 0x235c <LCD_vidWriteString+0x10>
	{
		LCD_vidWriteData(*Message);
		Message++;
	}
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	cf 91       	pop	r28
    2380:	df 91       	pop	r29
    2382:	08 95       	ret

00002384 <LCD_vidPrintNumber>:
 * Input      : None
 * Output     : None
 * Last_Author: MALKY
 * *********************************************/
void LCD_vidPrintNumber(uint32_t Number)
{
    2384:	df 93       	push	r29
    2386:	cf 93       	push	r28
    2388:	cd b7       	in	r28, 0x3d	; 61
    238a:	de b7       	in	r29, 0x3e	; 62
    238c:	2c 97       	sbiw	r28, 0x0c	; 12
    238e:	0f b6       	in	r0, 0x3f	; 63
    2390:	f8 94       	cli
    2392:	de bf       	out	0x3e, r29	; 62
    2394:	0f be       	out	0x3f, r0	; 63
    2396:	cd bf       	out	0x3d, r28	; 61
    2398:	69 87       	std	Y+9, r22	; 0x09
    239a:	7a 87       	std	Y+10, r23	; 0x0a
    239c:	8b 87       	std	Y+11, r24	; 0x0b
    239e:	9c 87       	std	Y+12, r25	; 0x0c
	uint32_t Factor = 1;
    23a0:	81 e0       	ldi	r24, 0x01	; 1
    23a2:	90 e0       	ldi	r25, 0x00	; 0
    23a4:	a0 e0       	ldi	r26, 0x00	; 0
    23a6:	b0 e0       	ldi	r27, 0x00	; 0
    23a8:	8d 83       	std	Y+5, r24	; 0x05
    23aa:	9e 83       	std	Y+6, r25	; 0x06
    23ac:	af 83       	std	Y+7, r26	; 0x07
    23ae:	b8 87       	std	Y+8, r27	; 0x08
	uint32_t Temp;

	Temp = Number / 10;
    23b0:	89 85       	ldd	r24, Y+9	; 0x09
    23b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b4:	ab 85       	ldd	r26, Y+11	; 0x0b
    23b6:	bc 85       	ldd	r27, Y+12	; 0x0c
    23b8:	2a e0       	ldi	r18, 0x0A	; 10
    23ba:	30 e0       	ldi	r19, 0x00	; 0
    23bc:	40 e0       	ldi	r20, 0x00	; 0
    23be:	50 e0       	ldi	r21, 0x00	; 0
    23c0:	bc 01       	movw	r22, r24
    23c2:	cd 01       	movw	r24, r26
    23c4:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodsi4>
    23c8:	da 01       	movw	r26, r20
    23ca:	c9 01       	movw	r24, r18
    23cc:	89 83       	std	Y+1, r24	; 0x01
    23ce:	9a 83       	std	Y+2, r25	; 0x02
    23d0:	ab 83       	std	Y+3, r26	; 0x03
    23d2:	bc 83       	std	Y+4, r27	; 0x04
    23d4:	24 c0       	rjmp	.+72     	; 0x241e <LCD_vidPrintNumber+0x9a>
	while (Temp != 0)
	{
		Temp = Temp / 10;
    23d6:	89 81       	ldd	r24, Y+1	; 0x01
    23d8:	9a 81       	ldd	r25, Y+2	; 0x02
    23da:	ab 81       	ldd	r26, Y+3	; 0x03
    23dc:	bc 81       	ldd	r27, Y+4	; 0x04
    23de:	2a e0       	ldi	r18, 0x0A	; 10
    23e0:	30 e0       	ldi	r19, 0x00	; 0
    23e2:	40 e0       	ldi	r20, 0x00	; 0
    23e4:	50 e0       	ldi	r21, 0x00	; 0
    23e6:	bc 01       	movw	r22, r24
    23e8:	cd 01       	movw	r24, r26
    23ea:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodsi4>
    23ee:	da 01       	movw	r26, r20
    23f0:	c9 01       	movw	r24, r18
    23f2:	89 83       	std	Y+1, r24	; 0x01
    23f4:	9a 83       	std	Y+2, r25	; 0x02
    23f6:	ab 83       	std	Y+3, r26	; 0x03
    23f8:	bc 83       	std	Y+4, r27	; 0x04
		Factor = Factor * 10;
    23fa:	8d 81       	ldd	r24, Y+5	; 0x05
    23fc:	9e 81       	ldd	r25, Y+6	; 0x06
    23fe:	af 81       	ldd	r26, Y+7	; 0x07
    2400:	b8 85       	ldd	r27, Y+8	; 0x08
    2402:	2a e0       	ldi	r18, 0x0A	; 10
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e0       	ldi	r20, 0x00	; 0
    2408:	50 e0       	ldi	r21, 0x00	; 0
    240a:	bc 01       	movw	r22, r24
    240c:	cd 01       	movw	r24, r26
    240e:	0e 94 cb 14 	call	0x2996	; 0x2996 <__mulsi3>
    2412:	dc 01       	movw	r26, r24
    2414:	cb 01       	movw	r24, r22
    2416:	8d 83       	std	Y+5, r24	; 0x05
    2418:	9e 83       	std	Y+6, r25	; 0x06
    241a:	af 83       	std	Y+7, r26	; 0x07
    241c:	b8 87       	std	Y+8, r27	; 0x08
{
	uint32_t Factor = 1;
	uint32_t Temp;

	Temp = Number / 10;
	while (Temp != 0)
    241e:	89 81       	ldd	r24, Y+1	; 0x01
    2420:	9a 81       	ldd	r25, Y+2	; 0x02
    2422:	ab 81       	ldd	r26, Y+3	; 0x03
    2424:	bc 81       	ldd	r27, Y+4	; 0x04
    2426:	00 97       	sbiw	r24, 0x00	; 0
    2428:	a1 05       	cpc	r26, r1
    242a:	b1 05       	cpc	r27, r1
    242c:	a1 f6       	brne	.-88     	; 0x23d6 <LCD_vidPrintNumber+0x52>
	{
		Temp = Temp / 10;
		Factor = Factor * 10;
	}

	Temp = Number;
    242e:	89 85       	ldd	r24, Y+9	; 0x09
    2430:	9a 85       	ldd	r25, Y+10	; 0x0a
    2432:	ab 85       	ldd	r26, Y+11	; 0x0b
    2434:	bc 85       	ldd	r27, Y+12	; 0x0c
    2436:	89 83       	std	Y+1, r24	; 0x01
    2438:	9a 83       	std	Y+2, r25	; 0x02
    243a:	ab 83       	std	Y+3, r26	; 0x03
    243c:	bc 83       	std	Y+4, r27	; 0x04
    243e:	35 c0       	rjmp	.+106    	; 0x24aa <LCD_vidPrintNumber+0x126>
	while(Temp != 0)
	{
		LCD_vidWriteData((Temp / Factor) + 0x30);
    2440:	89 81       	ldd	r24, Y+1	; 0x01
    2442:	9a 81       	ldd	r25, Y+2	; 0x02
    2444:	ab 81       	ldd	r26, Y+3	; 0x03
    2446:	bc 81       	ldd	r27, Y+4	; 0x04
    2448:	2d 81       	ldd	r18, Y+5	; 0x05
    244a:	3e 81       	ldd	r19, Y+6	; 0x06
    244c:	4f 81       	ldd	r20, Y+7	; 0x07
    244e:	58 85       	ldd	r21, Y+8	; 0x08
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodsi4>
    2458:	da 01       	movw	r26, r20
    245a:	c9 01       	movw	r24, r18
    245c:	80 5d       	subi	r24, 0xD0	; 208
    245e:	0e 94 65 10 	call	0x20ca	; 0x20ca <LCD_vidWriteData>
		Temp = Temp % Factor;
    2462:	89 81       	ldd	r24, Y+1	; 0x01
    2464:	9a 81       	ldd	r25, Y+2	; 0x02
    2466:	ab 81       	ldd	r26, Y+3	; 0x03
    2468:	bc 81       	ldd	r27, Y+4	; 0x04
    246a:	2d 81       	ldd	r18, Y+5	; 0x05
    246c:	3e 81       	ldd	r19, Y+6	; 0x06
    246e:	4f 81       	ldd	r20, Y+7	; 0x07
    2470:	58 85       	ldd	r21, Y+8	; 0x08
    2472:	bc 01       	movw	r22, r24
    2474:	cd 01       	movw	r24, r26
    2476:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodsi4>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	89 83       	std	Y+1, r24	; 0x01
    2480:	9a 83       	std	Y+2, r25	; 0x02
    2482:	ab 83       	std	Y+3, r26	; 0x03
    2484:	bc 83       	std	Y+4, r27	; 0x04
		Factor = Factor / 10;
    2486:	8d 81       	ldd	r24, Y+5	; 0x05
    2488:	9e 81       	ldd	r25, Y+6	; 0x06
    248a:	af 81       	ldd	r26, Y+7	; 0x07
    248c:	b8 85       	ldd	r27, Y+8	; 0x08
    248e:	2a e0       	ldi	r18, 0x0A	; 10
    2490:	30 e0       	ldi	r19, 0x00	; 0
    2492:	40 e0       	ldi	r20, 0x00	; 0
    2494:	50 e0       	ldi	r21, 0x00	; 0
    2496:	bc 01       	movw	r22, r24
    2498:	cd 01       	movw	r24, r26
    249a:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodsi4>
    249e:	da 01       	movw	r26, r20
    24a0:	c9 01       	movw	r24, r18
    24a2:	8d 83       	std	Y+5, r24	; 0x05
    24a4:	9e 83       	std	Y+6, r25	; 0x06
    24a6:	af 83       	std	Y+7, r26	; 0x07
    24a8:	b8 87       	std	Y+8, r27	; 0x08
		Temp = Temp / 10;
		Factor = Factor * 10;
	}

	Temp = Number;
	while(Temp != 0)
    24aa:	89 81       	ldd	r24, Y+1	; 0x01
    24ac:	9a 81       	ldd	r25, Y+2	; 0x02
    24ae:	ab 81       	ldd	r26, Y+3	; 0x03
    24b0:	bc 81       	ldd	r27, Y+4	; 0x04
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	a1 05       	cpc	r26, r1
    24b6:	b1 05       	cpc	r27, r1
    24b8:	19 f6       	brne	.-122    	; 0x2440 <LCD_vidPrintNumber+0xbc>
	{
		LCD_vidWriteData((Temp / Factor) + 0x30);
		Temp = Temp % Factor;
		Factor = Factor / 10;
	}
}
    24ba:	2c 96       	adiw	r28, 0x0c	; 12
    24bc:	0f b6       	in	r0, 0x3f	; 63
    24be:	f8 94       	cli
    24c0:	de bf       	out	0x3e, r29	; 62
    24c2:	0f be       	out	0x3f, r0	; 63
    24c4:	cd bf       	out	0x3d, r28	; 61
    24c6:	cf 91       	pop	r28
    24c8:	df 91       	pop	r29
    24ca:	08 95       	ret

000024cc <MASTER>:

#define Slave_Write_Address		0x20
#define Slave_Read_Address		0x21

void MASTER (void)
{
    24cc:	df 93       	push	r29
    24ce:	cf 93       	push	r28
    24d0:	cd b7       	in	r28, 0x3d	; 61
    24d2:	de b7       	in	r29, 0x3e	; 62
    24d4:	e4 97       	sbiw	r28, 0x34	; 52
    24d6:	0f b6       	in	r0, 0x3f	; 63
    24d8:	f8 94       	cli
    24da:	de bf       	out	0x3e, r29	; 62
    24dc:	0f be       	out	0x3f, r0	; 63
    24de:	cd bf       	out	0x3d, r28	; 61

	I2C_init();
    24e0:	0e 94 9b 05 	call	0xb36	; 0xb36 <I2C_init>

	Dio_vidSetPinDirection(Dio_PORTA,0,Dio_Input);
    24e4:	80 e0       	ldi	r24, 0x00	; 0
    24e6:	60 e0       	ldi	r22, 0x00	; 0
    24e8:	40 e0       	ldi	r20, 0x00	; 0
    24ea:	0e 94 b6 07 	call	0xf6c	; 0xf6c <Dio_vidSetPinDirection>
	ADC_vidInit();
    24ee:	0e 94 e4 0c 	call	0x19c8	; 0x19c8 <ADC_vidInit>
    24f2:	80 e0       	ldi	r24, 0x00	; 0
    24f4:	90 e0       	ldi	r25, 0x00	; 0
    24f6:	a0 ea       	ldi	r26, 0xA0	; 160
    24f8:	b0 e4       	ldi	r27, 0x40	; 64
    24fa:	8f a3       	std	Y+39, r24	; 0x27
    24fc:	98 a7       	std	Y+40, r25	; 0x28
    24fe:	a9 a7       	std	Y+41, r26	; 0x29
    2500:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2502:	6f a1       	ldd	r22, Y+39	; 0x27
    2504:	78 a5       	ldd	r23, Y+40	; 0x28
    2506:	89 a5       	ldd	r24, Y+41	; 0x29
    2508:	9a a5       	ldd	r25, Y+42	; 0x2a
    250a:	20 e0       	ldi	r18, 0x00	; 0
    250c:	30 e8       	ldi	r19, 0x80	; 128
    250e:	4b e3       	ldi	r20, 0x3B	; 59
    2510:	55 e4       	ldi	r21, 0x45	; 69
    2512:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2516:	dc 01       	movw	r26, r24
    2518:	cb 01       	movw	r24, r22
    251a:	8b a3       	std	Y+35, r24	; 0x23
    251c:	9c a3       	std	Y+36, r25	; 0x24
    251e:	ad a3       	std	Y+37, r26	; 0x25
    2520:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2522:	6b a1       	ldd	r22, Y+35	; 0x23
    2524:	7c a1       	ldd	r23, Y+36	; 0x24
    2526:	8d a1       	ldd	r24, Y+37	; 0x25
    2528:	9e a1       	ldd	r25, Y+38	; 0x26
    252a:	20 e0       	ldi	r18, 0x00	; 0
    252c:	30 e0       	ldi	r19, 0x00	; 0
    252e:	40 e8       	ldi	r20, 0x80	; 128
    2530:	5f e3       	ldi	r21, 0x3F	; 63
    2532:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2536:	88 23       	and	r24, r24
    2538:	2c f4       	brge	.+10     	; 0x2544 <MASTER+0x78>
		__ticks = 1;
    253a:	81 e0       	ldi	r24, 0x01	; 1
    253c:	90 e0       	ldi	r25, 0x00	; 0
    253e:	9a a3       	std	Y+34, r25	; 0x22
    2540:	89 a3       	std	Y+33, r24	; 0x21
    2542:	3f c0       	rjmp	.+126    	; 0x25c2 <MASTER+0xf6>
	else if (__tmp > 65535)
    2544:	6b a1       	ldd	r22, Y+35	; 0x23
    2546:	7c a1       	ldd	r23, Y+36	; 0x24
    2548:	8d a1       	ldd	r24, Y+37	; 0x25
    254a:	9e a1       	ldd	r25, Y+38	; 0x26
    254c:	20 e0       	ldi	r18, 0x00	; 0
    254e:	3f ef       	ldi	r19, 0xFF	; 255
    2550:	4f e7       	ldi	r20, 0x7F	; 127
    2552:	57 e4       	ldi	r21, 0x47	; 71
    2554:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2558:	18 16       	cp	r1, r24
    255a:	4c f5       	brge	.+82     	; 0x25ae <MASTER+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    255c:	6f a1       	ldd	r22, Y+39	; 0x27
    255e:	78 a5       	ldd	r23, Y+40	; 0x28
    2560:	89 a5       	ldd	r24, Y+41	; 0x29
    2562:	9a a5       	ldd	r25, Y+42	; 0x2a
    2564:	20 e0       	ldi	r18, 0x00	; 0
    2566:	30 e0       	ldi	r19, 0x00	; 0
    2568:	40 e2       	ldi	r20, 0x20	; 32
    256a:	51 e4       	ldi	r21, 0x41	; 65
    256c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2570:	dc 01       	movw	r26, r24
    2572:	cb 01       	movw	r24, r22
    2574:	bc 01       	movw	r22, r24
    2576:	cd 01       	movw	r24, r26
    2578:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    257c:	dc 01       	movw	r26, r24
    257e:	cb 01       	movw	r24, r22
    2580:	9a a3       	std	Y+34, r25	; 0x22
    2582:	89 a3       	std	Y+33, r24	; 0x21
    2584:	0f c0       	rjmp	.+30     	; 0x25a4 <MASTER+0xd8>
    2586:	8c e2       	ldi	r24, 0x2C	; 44
    2588:	91 e0       	ldi	r25, 0x01	; 1
    258a:	98 a3       	std	Y+32, r25	; 0x20
    258c:	8f 8f       	std	Y+31, r24	; 0x1f
    258e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2590:	98 a1       	ldd	r25, Y+32	; 0x20
    2592:	01 97       	sbiw	r24, 0x01	; 1
    2594:	f1 f7       	brne	.-4      	; 0x2592 <MASTER+0xc6>
    2596:	98 a3       	std	Y+32, r25	; 0x20
    2598:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259a:	89 a1       	ldd	r24, Y+33	; 0x21
    259c:	9a a1       	ldd	r25, Y+34	; 0x22
    259e:	01 97       	sbiw	r24, 0x01	; 1
    25a0:	9a a3       	std	Y+34, r25	; 0x22
    25a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a4:	89 a1       	ldd	r24, Y+33	; 0x21
    25a6:	9a a1       	ldd	r25, Y+34	; 0x22
    25a8:	00 97       	sbiw	r24, 0x00	; 0
    25aa:	69 f7       	brne	.-38     	; 0x2586 <MASTER+0xba>
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <MASTER+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25ae:	6b a1       	ldd	r22, Y+35	; 0x23
    25b0:	7c a1       	ldd	r23, Y+36	; 0x24
    25b2:	8d a1       	ldd	r24, Y+37	; 0x25
    25b4:	9e a1       	ldd	r25, Y+38	; 0x26
    25b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    25ba:	dc 01       	movw	r26, r24
    25bc:	cb 01       	movw	r24, r22
    25be:	9a a3       	std	Y+34, r25	; 0x22
    25c0:	89 a3       	std	Y+33, r24	; 0x21
    25c2:	89 a1       	ldd	r24, Y+33	; 0x21
    25c4:	9a a1       	ldd	r25, Y+34	; 0x22
    25c6:	9e 8f       	std	Y+30, r25	; 0x1e
    25c8:	8d 8f       	std	Y+29, r24	; 0x1d
    25ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25ce:	01 97       	sbiw	r24, 0x01	; 1
    25d0:	f1 f7       	brne	.-4      	; 0x25ce <MASTER+0x102>
    25d2:	9e 8f       	std	Y+30, r25	; 0x1e
    25d4:	8d 8f       	std	Y+29, r24	; 0x1d
	uint32_t u32Volts;
	uint32_t u32Temperature;

	while(1){
		_delay_ms(5);
		u16Digital = ADC_u16ReadChannel(1);
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	0e 94 16 0d 	call	0x1a2c	; 0x1a2c <ADC_u16ReadChannel>
    25dc:	9c ab       	std	Y+52, r25	; 0x34
    25de:	8b ab       	std	Y+51, r24	; 0x33

		u32Volts = ((uint32_t)u16Digital * 5000) / 1024;
    25e0:	8b a9       	ldd	r24, Y+51	; 0x33
    25e2:	9c a9       	ldd	r25, Y+52	; 0x34
    25e4:	cc 01       	movw	r24, r24
    25e6:	a0 e0       	ldi	r26, 0x00	; 0
    25e8:	b0 e0       	ldi	r27, 0x00	; 0
    25ea:	28 e8       	ldi	r18, 0x88	; 136
    25ec:	33 e1       	ldi	r19, 0x13	; 19
    25ee:	40 e0       	ldi	r20, 0x00	; 0
    25f0:	50 e0       	ldi	r21, 0x00	; 0
    25f2:	bc 01       	movw	r22, r24
    25f4:	cd 01       	movw	r24, r26
    25f6:	0e 94 cb 14 	call	0x2996	; 0x2996 <__mulsi3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	07 2e       	mov	r0, r23
    2600:	7a e0       	ldi	r23, 0x0A	; 10
    2602:	b6 95       	lsr	r27
    2604:	a7 95       	ror	r26
    2606:	97 95       	ror	r25
    2608:	87 95       	ror	r24
    260a:	7a 95       	dec	r23
    260c:	d1 f7       	brne	.-12     	; 0x2602 <MASTER+0x136>
    260e:	70 2d       	mov	r23, r0
    2610:	8f a7       	std	Y+47, r24	; 0x2f
    2612:	98 ab       	std	Y+48, r25	; 0x30
    2614:	a9 ab       	std	Y+49, r26	; 0x31
    2616:	ba ab       	std	Y+50, r27	; 0x32
		u32Temperature = u32Volts / 10;
    2618:	8f a5       	ldd	r24, Y+47	; 0x2f
    261a:	98 a9       	ldd	r25, Y+48	; 0x30
    261c:	a9 a9       	ldd	r26, Y+49	; 0x31
    261e:	ba a9       	ldd	r27, Y+50	; 0x32
    2620:	2a e0       	ldi	r18, 0x0A	; 10
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	40 e0       	ldi	r20, 0x00	; 0
    2626:	50 e0       	ldi	r21, 0x00	; 0
    2628:	bc 01       	movw	r22, r24
    262a:	cd 01       	movw	r24, r26
    262c:	0e 94 ea 14 	call	0x29d4	; 0x29d4 <__udivmodsi4>
    2630:	da 01       	movw	r26, r20
    2632:	c9 01       	movw	r24, r18
    2634:	8b a7       	std	Y+43, r24	; 0x2b
    2636:	9c a7       	std	Y+44, r25	; 0x2c
    2638:	ad a7       	std	Y+45, r26	; 0x2d
    263a:	be a7       	std	Y+46, r27	; 0x2e


		I2C_START();
    263c:	0e 94 aa 05 	call	0xb54	; 0xb54 <I2C_START>
		I2C_WRITE_address(Slave_Write_Address);
    2640:	80 e2       	ldi	r24, 0x20	; 32
    2642:	0e 94 c3 05 	call	0xb86	; 0xb86 <I2C_WRITE_address>
    2646:	80 e0       	ldi	r24, 0x00	; 0
    2648:	90 e0       	ldi	r25, 0x00	; 0
    264a:	a8 ec       	ldi	r26, 0xC8	; 200
    264c:	b2 e4       	ldi	r27, 0x42	; 66
    264e:	89 8f       	std	Y+25, r24	; 0x19
    2650:	9a 8f       	std	Y+26, r25	; 0x1a
    2652:	ab 8f       	std	Y+27, r26	; 0x1b
    2654:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2656:	69 8d       	ldd	r22, Y+25	; 0x19
    2658:	7a 8d       	ldd	r23, Y+26	; 0x1a
    265a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    265c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    265e:	20 e0       	ldi	r18, 0x00	; 0
    2660:	30 e8       	ldi	r19, 0x80	; 128
    2662:	4b e3       	ldi	r20, 0x3B	; 59
    2664:	55 e4       	ldi	r21, 0x45	; 69
    2666:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    266a:	dc 01       	movw	r26, r24
    266c:	cb 01       	movw	r24, r22
    266e:	8d 8b       	std	Y+21, r24	; 0x15
    2670:	9e 8b       	std	Y+22, r25	; 0x16
    2672:	af 8b       	std	Y+23, r26	; 0x17
    2674:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2676:	6d 89       	ldd	r22, Y+21	; 0x15
    2678:	7e 89       	ldd	r23, Y+22	; 0x16
    267a:	8f 89       	ldd	r24, Y+23	; 0x17
    267c:	98 8d       	ldd	r25, Y+24	; 0x18
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	40 e8       	ldi	r20, 0x80	; 128
    2684:	5f e3       	ldi	r21, 0x3F	; 63
    2686:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    268a:	88 23       	and	r24, r24
    268c:	2c f4       	brge	.+10     	; 0x2698 <MASTER+0x1cc>
		__ticks = 1;
    268e:	81 e0       	ldi	r24, 0x01	; 1
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	9c 8b       	std	Y+20, r25	; 0x14
    2694:	8b 8b       	std	Y+19, r24	; 0x13
    2696:	3f c0       	rjmp	.+126    	; 0x2716 <MASTER+0x24a>
	else if (__tmp > 65535)
    2698:	6d 89       	ldd	r22, Y+21	; 0x15
    269a:	7e 89       	ldd	r23, Y+22	; 0x16
    269c:	8f 89       	ldd	r24, Y+23	; 0x17
    269e:	98 8d       	ldd	r25, Y+24	; 0x18
    26a0:	20 e0       	ldi	r18, 0x00	; 0
    26a2:	3f ef       	ldi	r19, 0xFF	; 255
    26a4:	4f e7       	ldi	r20, 0x7F	; 127
    26a6:	57 e4       	ldi	r21, 0x47	; 71
    26a8:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    26ac:	18 16       	cp	r1, r24
    26ae:	4c f5       	brge	.+82     	; 0x2702 <MASTER+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26b0:	69 8d       	ldd	r22, Y+25	; 0x19
    26b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	40 e2       	ldi	r20, 0x20	; 32
    26be:	51 e4       	ldi	r21, 0x41	; 65
    26c0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	bc 01       	movw	r22, r24
    26ca:	cd 01       	movw	r24, r26
    26cc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26d0:	dc 01       	movw	r26, r24
    26d2:	cb 01       	movw	r24, r22
    26d4:	9c 8b       	std	Y+20, r25	; 0x14
    26d6:	8b 8b       	std	Y+19, r24	; 0x13
    26d8:	0f c0       	rjmp	.+30     	; 0x26f8 <MASTER+0x22c>
    26da:	8c e2       	ldi	r24, 0x2C	; 44
    26dc:	91 e0       	ldi	r25, 0x01	; 1
    26de:	9a 8b       	std	Y+18, r25	; 0x12
    26e0:	89 8b       	std	Y+17, r24	; 0x11
    26e2:	89 89       	ldd	r24, Y+17	; 0x11
    26e4:	9a 89       	ldd	r25, Y+18	; 0x12
    26e6:	01 97       	sbiw	r24, 0x01	; 1
    26e8:	f1 f7       	brne	.-4      	; 0x26e6 <MASTER+0x21a>
    26ea:	9a 8b       	std	Y+18, r25	; 0x12
    26ec:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ee:	8b 89       	ldd	r24, Y+19	; 0x13
    26f0:	9c 89       	ldd	r25, Y+20	; 0x14
    26f2:	01 97       	sbiw	r24, 0x01	; 1
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f8:	8b 89       	ldd	r24, Y+19	; 0x13
    26fa:	9c 89       	ldd	r25, Y+20	; 0x14
    26fc:	00 97       	sbiw	r24, 0x00	; 0
    26fe:	69 f7       	brne	.-38     	; 0x26da <MASTER+0x20e>
    2700:	14 c0       	rjmp	.+40     	; 0x272a <MASTER+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2702:	6d 89       	ldd	r22, Y+21	; 0x15
    2704:	7e 89       	ldd	r23, Y+22	; 0x16
    2706:	8f 89       	ldd	r24, Y+23	; 0x17
    2708:	98 8d       	ldd	r25, Y+24	; 0x18
    270a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    270e:	dc 01       	movw	r26, r24
    2710:	cb 01       	movw	r24, r22
    2712:	9c 8b       	std	Y+20, r25	; 0x14
    2714:	8b 8b       	std	Y+19, r24	; 0x13
    2716:	8b 89       	ldd	r24, Y+19	; 0x13
    2718:	9c 89       	ldd	r25, Y+20	; 0x14
    271a:	98 8b       	std	Y+16, r25	; 0x10
    271c:	8f 87       	std	Y+15, r24	; 0x0f
    271e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2720:	98 89       	ldd	r25, Y+16	; 0x10
    2722:	01 97       	sbiw	r24, 0x01	; 1
    2724:	f1 f7       	brne	.-4      	; 0x2722 <MASTER+0x256>
    2726:	98 8b       	std	Y+16, r25	; 0x10
    2728:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);

		I2C_MASTER_WRITE((uint8_t)u32Temperature);
    272a:	8b a5       	ldd	r24, Y+43	; 0x2b
    272c:	0e 94 06 06 	call	0xc0c	; 0xc0c <I2C_MASTER_WRITE>
    2730:	80 e0       	ldi	r24, 0x00	; 0
    2732:	90 e0       	ldi	r25, 0x00	; 0
    2734:	a8 e4       	ldi	r26, 0x48	; 72
    2736:	b2 e4       	ldi	r27, 0x42	; 66
    2738:	8b 87       	std	Y+11, r24	; 0x0b
    273a:	9c 87       	std	Y+12, r25	; 0x0c
    273c:	ad 87       	std	Y+13, r26	; 0x0d
    273e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2740:	6b 85       	ldd	r22, Y+11	; 0x0b
    2742:	7c 85       	ldd	r23, Y+12	; 0x0c
    2744:	8d 85       	ldd	r24, Y+13	; 0x0d
    2746:	9e 85       	ldd	r25, Y+14	; 0x0e
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e8       	ldi	r19, 0x80	; 128
    274c:	4b e3       	ldi	r20, 0x3B	; 59
    274e:	55 e4       	ldi	r21, 0x45	; 69
    2750:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2754:	dc 01       	movw	r26, r24
    2756:	cb 01       	movw	r24, r22
    2758:	8f 83       	std	Y+7, r24	; 0x07
    275a:	98 87       	std	Y+8, r25	; 0x08
    275c:	a9 87       	std	Y+9, r26	; 0x09
    275e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2760:	6f 81       	ldd	r22, Y+7	; 0x07
    2762:	78 85       	ldd	r23, Y+8	; 0x08
    2764:	89 85       	ldd	r24, Y+9	; 0x09
    2766:	9a 85       	ldd	r25, Y+10	; 0x0a
    2768:	20 e0       	ldi	r18, 0x00	; 0
    276a:	30 e0       	ldi	r19, 0x00	; 0
    276c:	40 e8       	ldi	r20, 0x80	; 128
    276e:	5f e3       	ldi	r21, 0x3F	; 63
    2770:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2774:	88 23       	and	r24, r24
    2776:	2c f4       	brge	.+10     	; 0x2782 <MASTER+0x2b6>
		__ticks = 1;
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	90 e0       	ldi	r25, 0x00	; 0
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	3f c0       	rjmp	.+126    	; 0x2800 <MASTER+0x334>
	else if (__tmp > 65535)
    2782:	6f 81       	ldd	r22, Y+7	; 0x07
    2784:	78 85       	ldd	r23, Y+8	; 0x08
    2786:	89 85       	ldd	r24, Y+9	; 0x09
    2788:	9a 85       	ldd	r25, Y+10	; 0x0a
    278a:	20 e0       	ldi	r18, 0x00	; 0
    278c:	3f ef       	ldi	r19, 0xFF	; 255
    278e:	4f e7       	ldi	r20, 0x7F	; 127
    2790:	57 e4       	ldi	r21, 0x47	; 71
    2792:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2796:	18 16       	cp	r1, r24
    2798:	4c f5       	brge	.+82     	; 0x27ec <MASTER+0x320>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    279a:	6b 85       	ldd	r22, Y+11	; 0x0b
    279c:	7c 85       	ldd	r23, Y+12	; 0x0c
    279e:	8d 85       	ldd	r24, Y+13	; 0x0d
    27a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    27a2:	20 e0       	ldi	r18, 0x00	; 0
    27a4:	30 e0       	ldi	r19, 0x00	; 0
    27a6:	40 e2       	ldi	r20, 0x20	; 32
    27a8:	51 e4       	ldi	r21, 0x41	; 65
    27aa:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ae:	dc 01       	movw	r26, r24
    27b0:	cb 01       	movw	r24, r22
    27b2:	bc 01       	movw	r22, r24
    27b4:	cd 01       	movw	r24, r26
    27b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27ba:	dc 01       	movw	r26, r24
    27bc:	cb 01       	movw	r24, r22
    27be:	9e 83       	std	Y+6, r25	; 0x06
    27c0:	8d 83       	std	Y+5, r24	; 0x05
    27c2:	0f c0       	rjmp	.+30     	; 0x27e2 <MASTER+0x316>
    27c4:	8c e2       	ldi	r24, 0x2C	; 44
    27c6:	91 e0       	ldi	r25, 0x01	; 1
    27c8:	9c 83       	std	Y+4, r25	; 0x04
    27ca:	8b 83       	std	Y+3, r24	; 0x03
    27cc:	8b 81       	ldd	r24, Y+3	; 0x03
    27ce:	9c 81       	ldd	r25, Y+4	; 0x04
    27d0:	01 97       	sbiw	r24, 0x01	; 1
    27d2:	f1 f7       	brne	.-4      	; 0x27d0 <MASTER+0x304>
    27d4:	9c 83       	std	Y+4, r25	; 0x04
    27d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27d8:	8d 81       	ldd	r24, Y+5	; 0x05
    27da:	9e 81       	ldd	r25, Y+6	; 0x06
    27dc:	01 97       	sbiw	r24, 0x01	; 1
    27de:	9e 83       	std	Y+6, r25	; 0x06
    27e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27e2:	8d 81       	ldd	r24, Y+5	; 0x05
    27e4:	9e 81       	ldd	r25, Y+6	; 0x06
    27e6:	00 97       	sbiw	r24, 0x00	; 0
    27e8:	69 f7       	brne	.-38     	; 0x27c4 <MASTER+0x2f8>
    27ea:	14 c0       	rjmp	.+40     	; 0x2814 <MASTER+0x348>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27ec:	6f 81       	ldd	r22, Y+7	; 0x07
    27ee:	78 85       	ldd	r23, Y+8	; 0x08
    27f0:	89 85       	ldd	r24, Y+9	; 0x09
    27f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    27f4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	9e 83       	std	Y+6, r25	; 0x06
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	9a 83       	std	Y+2, r25	; 0x02
    2806:	89 83       	std	Y+1, r24	; 0x01
    2808:	89 81       	ldd	r24, Y+1	; 0x01
    280a:	9a 81       	ldd	r25, Y+2	; 0x02
    280c:	01 97       	sbiw	r24, 0x01	; 1
    280e:	f1 f7       	brne	.-4      	; 0x280c <MASTER+0x340>
    2810:	9a 83       	std	Y+2, r25	; 0x02
    2812:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);
		I2C_STOP();
    2814:	0e 94 8c 07 	call	0xf18	; 0xf18 <I2C_STOP>
    2818:	6c ce       	rjmp	.-808    	; 0x24f2 <MASTER+0x26>

0000281a <main>:
#include "MCAL/I2c/inc/i2c.h"
#define Slave_Write_Address		0x20
#define Slave_Read_Address		0x21

void main (void)
{
    281a:	df 93       	push	r29
    281c:	cf 93       	push	r28
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	62 97       	sbiw	r28, 0x12	; 18
    2824:	0f b6       	in	r0, 0x3f	; 63
    2826:	f8 94       	cli
    2828:	de bf       	out	0x3e, r29	; 62
    282a:	0f be       	out	0x3f, r0	; 63
    282c:	cd bf       	out	0x3d, r28	; 61
	/*Configure RS signal as an output*/
		Dio_vidSetPinDirection(Dio_PORTC, 0, Dio_Output);
    282e:	82 e0       	ldi	r24, 0x02	; 2
    2830:	60 e0       	ldi	r22, 0x00	; 0
    2832:	41 e0       	ldi	r20, 0x01	; 1
    2834:	0e 94 b6 07 	call	0xf6c	; 0xf6c <Dio_vidSetPinDirection>

		/*Configure R\W signal as an output*/
		Dio_vidSetPinDirection(Dio_PORTC, 1, Dio_Output);
    2838:	82 e0       	ldi	r24, 0x02	; 2
    283a:	61 e0       	ldi	r22, 0x01	; 1
    283c:	41 e0       	ldi	r20, 0x01	; 1
    283e:	0e 94 b6 07 	call	0xf6c	; 0xf6c <Dio_vidSetPinDirection>

		/*Configure Enable signal as an output*/
		Dio_vidSetPinDirection(Dio_PORTC, 2, Dio_Output);
    2842:	82 e0       	ldi	r24, 0x02	; 2
    2844:	62 e0       	ldi	r22, 0x02	; 2
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 b6 07 	call	0xf6c	; 0xf6c <Dio_vidSetPinDirection>

		/*Configure Data-Port to output*/
		Dio_vidSetPortDirection(Dio_PORTD, Dio_Output);
    284c:	83 e0       	ldi	r24, 0x03	; 3
    284e:	61 e0       	ldi	r22, 0x01	; 1
    2850:	0e 94 a8 08 	call	0x1150	; 0x1150 <Dio_vidSetPortDirection>


		I2C_init();
    2854:	0e 94 9b 05 	call	0xb36	; 0xb36 <I2C_init>
		LCD_vidInit();
    2858:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <LCD_vidInit>
		I2C_SLAVE_Init(Slave_Write_Address);
    285c:	80 e2       	ldi	r24, 0x20	; 32
    285e:	0e 94 4a 06 	call	0xc94	; 0xc94 <I2C_SLAVE_Init>

		while (I2C_Slave_listen_READ()!=0);
    2862:	0e 94 7e 06 	call	0xcfc	; 0xcfc <I2C_Slave_listen_READ>
    2866:	88 23       	and	r24, r24
    2868:	e1 f7       	brne	.-8      	; 0x2862 <main+0x48>
    286a:	80 e0       	ldi	r24, 0x00	; 0
    286c:	90 e8       	ldi	r25, 0x80	; 128
    286e:	ab e3       	ldi	r26, 0x3B	; 59
    2870:	b5 e4       	ldi	r27, 0x45	; 69
    2872:	8b 87       	std	Y+11, r24	; 0x0b
    2874:	9c 87       	std	Y+12, r25	; 0x0c
    2876:	ad 87       	std	Y+13, r26	; 0x0d
    2878:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    287a:	6b 85       	ldd	r22, Y+11	; 0x0b
    287c:	7c 85       	ldd	r23, Y+12	; 0x0c
    287e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2880:	9e 85       	ldd	r25, Y+14	; 0x0e
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e8       	ldi	r19, 0x80	; 128
    2886:	4b e3       	ldi	r20, 0x3B	; 59
    2888:	55 e4       	ldi	r21, 0x45	; 69
    288a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	8f 83       	std	Y+7, r24	; 0x07
    2894:	98 87       	std	Y+8, r25	; 0x08
    2896:	a9 87       	std	Y+9, r26	; 0x09
    2898:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    289a:	6f 81       	ldd	r22, Y+7	; 0x07
    289c:	78 85       	ldd	r23, Y+8	; 0x08
    289e:	89 85       	ldd	r24, Y+9	; 0x09
    28a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a2:	20 e0       	ldi	r18, 0x00	; 0
    28a4:	30 e0       	ldi	r19, 0x00	; 0
    28a6:	40 e8       	ldi	r20, 0x80	; 128
    28a8:	5f e3       	ldi	r21, 0x3F	; 63
    28aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    28ae:	88 23       	and	r24, r24
    28b0:	2c f4       	brge	.+10     	; 0x28bc <main+0xa2>
		__ticks = 1;
    28b2:	81 e0       	ldi	r24, 0x01	; 1
    28b4:	90 e0       	ldi	r25, 0x00	; 0
    28b6:	9e 83       	std	Y+6, r25	; 0x06
    28b8:	8d 83       	std	Y+5, r24	; 0x05
    28ba:	3f c0       	rjmp	.+126    	; 0x293a <main+0x120>
	else if (__tmp > 65535)
    28bc:	6f 81       	ldd	r22, Y+7	; 0x07
    28be:	78 85       	ldd	r23, Y+8	; 0x08
    28c0:	89 85       	ldd	r24, Y+9	; 0x09
    28c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28c4:	20 e0       	ldi	r18, 0x00	; 0
    28c6:	3f ef       	ldi	r19, 0xFF	; 255
    28c8:	4f e7       	ldi	r20, 0x7F	; 127
    28ca:	57 e4       	ldi	r21, 0x47	; 71
    28cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    28d0:	18 16       	cp	r1, r24
    28d2:	4c f5       	brge	.+82     	; 0x2926 <main+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    28d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    28d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    28da:	9e 85       	ldd	r25, Y+14	; 0x0e
    28dc:	20 e0       	ldi	r18, 0x00	; 0
    28de:	30 e0       	ldi	r19, 0x00	; 0
    28e0:	40 e2       	ldi	r20, 0x20	; 32
    28e2:	51 e4       	ldi	r21, 0x41	; 65
    28e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	bc 01       	movw	r22, r24
    28ee:	cd 01       	movw	r24, r26
    28f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28f4:	dc 01       	movw	r26, r24
    28f6:	cb 01       	movw	r24, r22
    28f8:	9e 83       	std	Y+6, r25	; 0x06
    28fa:	8d 83       	std	Y+5, r24	; 0x05
    28fc:	0f c0       	rjmp	.+30     	; 0x291c <main+0x102>
    28fe:	8c e2       	ldi	r24, 0x2C	; 44
    2900:	91 e0       	ldi	r25, 0x01	; 1
    2902:	9c 83       	std	Y+4, r25	; 0x04
    2904:	8b 83       	std	Y+3, r24	; 0x03
    2906:	8b 81       	ldd	r24, Y+3	; 0x03
    2908:	9c 81       	ldd	r25, Y+4	; 0x04
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	f1 f7       	brne	.-4      	; 0x290a <main+0xf0>
    290e:	9c 83       	std	Y+4, r25	; 0x04
    2910:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2912:	8d 81       	ldd	r24, Y+5	; 0x05
    2914:	9e 81       	ldd	r25, Y+6	; 0x06
    2916:	01 97       	sbiw	r24, 0x01	; 1
    2918:	9e 83       	std	Y+6, r25	; 0x06
    291a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    291c:	8d 81       	ldd	r24, Y+5	; 0x05
    291e:	9e 81       	ldd	r25, Y+6	; 0x06
    2920:	00 97       	sbiw	r24, 0x00	; 0
    2922:	69 f7       	brne	.-38     	; 0x28fe <main+0xe4>
    2924:	14 c0       	rjmp	.+40     	; 0x294e <main+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2932:	dc 01       	movw	r26, r24
    2934:	cb 01       	movw	r24, r22
    2936:	9e 83       	std	Y+6, r25	; 0x06
    2938:	8d 83       	std	Y+5, r24	; 0x05
    293a:	8d 81       	ldd	r24, Y+5	; 0x05
    293c:	9e 81       	ldd	r25, Y+6	; 0x06
    293e:	9a 83       	std	Y+2, r25	; 0x02
    2940:	89 83       	std	Y+1, r24	; 0x01
    2942:	89 81       	ldd	r24, Y+1	; 0x01
    2944:	9a 81       	ldd	r25, Y+2	; 0x02
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <main+0x12c>
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		uint32_t u32Temperature = I2C_SLAVE_READ();
    294e:	0e 94 a3 06 	call	0xd46	; 0xd46 <I2C_SLAVE_READ>
    2952:	99 27       	eor	r25, r25
    2954:	87 fd       	sbrc	r24, 7
    2956:	90 95       	com	r25
    2958:	a9 2f       	mov	r26, r25
    295a:	b9 2f       	mov	r27, r25
    295c:	8f 87       	std	Y+15, r24	; 0x0f
    295e:	98 8b       	std	Y+16, r25	; 0x10
    2960:	a9 8b       	std	Y+17, r26	; 0x11
    2962:	ba 8b       	std	Y+18, r27	; 0x12

		LCD_vidGoTo(0,1);
    2964:	80 e0       	ldi	r24, 0x00	; 0
    2966:	61 e0       	ldi	r22, 0x01	; 1
    2968:	0e 94 75 11 	call	0x22ea	; 0x22ea <LCD_vidGoTo>
		LCD_vidWriteString("Temperature:");
    296c:	80 e6       	ldi	r24, 0x60	; 96
    296e:	90 e0       	ldi	r25, 0x00	; 0
    2970:	0e 94 a6 11 	call	0x234c	; 0x234c <LCD_vidWriteString>
		LCD_vidPrintNumber(u32Temperature);
    2974:	8f 85       	ldd	r24, Y+15	; 0x0f
    2976:	98 89       	ldd	r25, Y+16	; 0x10
    2978:	a9 89       	ldd	r26, Y+17	; 0x11
    297a:	ba 89       	ldd	r27, Y+18	; 0x12
    297c:	bc 01       	movw	r22, r24
    297e:	cd 01       	movw	r24, r26
    2980:	0e 94 c2 11 	call	0x2384	; 0x2384 <LCD_vidPrintNumber>


}
    2984:	62 96       	adiw	r28, 0x12	; 18
    2986:	0f b6       	in	r0, 0x3f	; 63
    2988:	f8 94       	cli
    298a:	de bf       	out	0x3e, r29	; 62
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	cd bf       	out	0x3d, r28	; 61
    2990:	cf 91       	pop	r28
    2992:	df 91       	pop	r29
    2994:	08 95       	ret

00002996 <__mulsi3>:
    2996:	62 9f       	mul	r22, r18
    2998:	d0 01       	movw	r26, r0
    299a:	73 9f       	mul	r23, r19
    299c:	f0 01       	movw	r30, r0
    299e:	82 9f       	mul	r24, r18
    29a0:	e0 0d       	add	r30, r0
    29a2:	f1 1d       	adc	r31, r1
    29a4:	64 9f       	mul	r22, r20
    29a6:	e0 0d       	add	r30, r0
    29a8:	f1 1d       	adc	r31, r1
    29aa:	92 9f       	mul	r25, r18
    29ac:	f0 0d       	add	r31, r0
    29ae:	83 9f       	mul	r24, r19
    29b0:	f0 0d       	add	r31, r0
    29b2:	74 9f       	mul	r23, r20
    29b4:	f0 0d       	add	r31, r0
    29b6:	65 9f       	mul	r22, r21
    29b8:	f0 0d       	add	r31, r0
    29ba:	99 27       	eor	r25, r25
    29bc:	72 9f       	mul	r23, r18
    29be:	b0 0d       	add	r27, r0
    29c0:	e1 1d       	adc	r30, r1
    29c2:	f9 1f       	adc	r31, r25
    29c4:	63 9f       	mul	r22, r19
    29c6:	b0 0d       	add	r27, r0
    29c8:	e1 1d       	adc	r30, r1
    29ca:	f9 1f       	adc	r31, r25
    29cc:	bd 01       	movw	r22, r26
    29ce:	cf 01       	movw	r24, r30
    29d0:	11 24       	eor	r1, r1
    29d2:	08 95       	ret

000029d4 <__udivmodsi4>:
    29d4:	a1 e2       	ldi	r26, 0x21	; 33
    29d6:	1a 2e       	mov	r1, r26
    29d8:	aa 1b       	sub	r26, r26
    29da:	bb 1b       	sub	r27, r27
    29dc:	fd 01       	movw	r30, r26
    29de:	0d c0       	rjmp	.+26     	; 0x29fa <__udivmodsi4_ep>

000029e0 <__udivmodsi4_loop>:
    29e0:	aa 1f       	adc	r26, r26
    29e2:	bb 1f       	adc	r27, r27
    29e4:	ee 1f       	adc	r30, r30
    29e6:	ff 1f       	adc	r31, r31
    29e8:	a2 17       	cp	r26, r18
    29ea:	b3 07       	cpc	r27, r19
    29ec:	e4 07       	cpc	r30, r20
    29ee:	f5 07       	cpc	r31, r21
    29f0:	20 f0       	brcs	.+8      	; 0x29fa <__udivmodsi4_ep>
    29f2:	a2 1b       	sub	r26, r18
    29f4:	b3 0b       	sbc	r27, r19
    29f6:	e4 0b       	sbc	r30, r20
    29f8:	f5 0b       	sbc	r31, r21

000029fa <__udivmodsi4_ep>:
    29fa:	66 1f       	adc	r22, r22
    29fc:	77 1f       	adc	r23, r23
    29fe:	88 1f       	adc	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	1a 94       	dec	r1
    2a04:	69 f7       	brne	.-38     	; 0x29e0 <__udivmodsi4_loop>
    2a06:	60 95       	com	r22
    2a08:	70 95       	com	r23
    2a0a:	80 95       	com	r24
    2a0c:	90 95       	com	r25
    2a0e:	9b 01       	movw	r18, r22
    2a10:	ac 01       	movw	r20, r24
    2a12:	bd 01       	movw	r22, r26
    2a14:	cf 01       	movw	r24, r30
    2a16:	08 95       	ret

00002a18 <__prologue_saves__>:
    2a18:	2f 92       	push	r2
    2a1a:	3f 92       	push	r3
    2a1c:	4f 92       	push	r4
    2a1e:	5f 92       	push	r5
    2a20:	6f 92       	push	r6
    2a22:	7f 92       	push	r7
    2a24:	8f 92       	push	r8
    2a26:	9f 92       	push	r9
    2a28:	af 92       	push	r10
    2a2a:	bf 92       	push	r11
    2a2c:	cf 92       	push	r12
    2a2e:	df 92       	push	r13
    2a30:	ef 92       	push	r14
    2a32:	ff 92       	push	r15
    2a34:	0f 93       	push	r16
    2a36:	1f 93       	push	r17
    2a38:	cf 93       	push	r28
    2a3a:	df 93       	push	r29
    2a3c:	cd b7       	in	r28, 0x3d	; 61
    2a3e:	de b7       	in	r29, 0x3e	; 62
    2a40:	ca 1b       	sub	r28, r26
    2a42:	db 0b       	sbc	r29, r27
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	09 94       	ijmp

00002a50 <__epilogue_restores__>:
    2a50:	2a 88       	ldd	r2, Y+18	; 0x12
    2a52:	39 88       	ldd	r3, Y+17	; 0x11
    2a54:	48 88       	ldd	r4, Y+16	; 0x10
    2a56:	5f 84       	ldd	r5, Y+15	; 0x0f
    2a58:	6e 84       	ldd	r6, Y+14	; 0x0e
    2a5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    2a5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    2a5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2a60:	aa 84       	ldd	r10, Y+10	; 0x0a
    2a62:	b9 84       	ldd	r11, Y+9	; 0x09
    2a64:	c8 84       	ldd	r12, Y+8	; 0x08
    2a66:	df 80       	ldd	r13, Y+7	; 0x07
    2a68:	ee 80       	ldd	r14, Y+6	; 0x06
    2a6a:	fd 80       	ldd	r15, Y+5	; 0x05
    2a6c:	0c 81       	ldd	r16, Y+4	; 0x04
    2a6e:	1b 81       	ldd	r17, Y+3	; 0x03
    2a70:	aa 81       	ldd	r26, Y+2	; 0x02
    2a72:	b9 81       	ldd	r27, Y+1	; 0x01
    2a74:	ce 0f       	add	r28, r30
    2a76:	d1 1d       	adc	r29, r1
    2a78:	0f b6       	in	r0, 0x3f	; 63
    2a7a:	f8 94       	cli
    2a7c:	de bf       	out	0x3e, r29	; 62
    2a7e:	0f be       	out	0x3f, r0	; 63
    2a80:	cd bf       	out	0x3d, r28	; 61
    2a82:	ed 01       	movw	r28, r26
    2a84:	08 95       	ret

00002a86 <_exit>:
    2a86:	f8 94       	cli

00002a88 <__stop_program>:
    2a88:	ff cf       	rjmp	.-2      	; 0x2a88 <__stop_program>
